pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/args-none -a args-none -- -q  -f run args-none < /dev/null 2> tests/userprog/args-none.errors > tests/userprog/args-none.output
perl -I../.. ../../tests/userprog/args-none.ck tests/userprog/args-none tests/userprog/args-none.result
pass tests/userprog/args-none
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/args-single -a args-single -- -q  -f run 'args-single onearg' < /dev/null 2> tests/userprog/args-single.errors > tests/userprog/args-single.output
perl -I../.. ../../tests/userprog/args-single.ck tests/userprog/args-single tests/userprog/args-single.result
pass tests/userprog/args-single
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/args-multiple -a args-multiple -- -q  -f run 'args-multiple some arguments for you!' < /dev/null 2> tests/userprog/args-multiple.errors > tests/userprog/args-multiple.output
perl -I../.. ../../tests/userprog/args-multiple.ck tests/userprog/args-multiple tests/userprog/args-multiple.result
pass tests/userprog/args-multiple
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/args-many -a args-many -- -q  -f run 'args-many a b c d e f g h i j k l m n o p q r s t u v' < /dev/null 2> tests/userprog/args-many.errors > tests/userprog/args-many.output
perl -I../.. ../../tests/userprog/args-many.ck tests/userprog/args-many tests/userprog/args-many.result
pass tests/userprog/args-many
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/args-dbl-space -a args-dbl-space -- -q  -f run 'args-dbl-space two  spaces!' < /dev/null 2> tests/userprog/args-dbl-space.errors > tests/userprog/args-dbl-space.output
perl -I../.. ../../tests/userprog/args-dbl-space.ck tests/userprog/args-dbl-space tests/userprog/args-dbl-space.result
pass tests/userprog/args-dbl-space
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/sc-bad-sp -a sc-bad-sp -- -q  -f run sc-bad-sp < /dev/null 2> tests/userprog/sc-bad-sp.errors > tests/userprog/sc-bad-sp.output
perl -I../.. ../../tests/userprog/sc-bad-sp.ck tests/userprog/sc-bad-sp tests/userprog/sc-bad-sp.result
pass tests/userprog/sc-bad-sp
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/sc-bad-arg -a sc-bad-arg -- -q  -f run sc-bad-arg < /dev/null 2> tests/userprog/sc-bad-arg.errors > tests/userprog/sc-bad-arg.output
perl -I../.. ../../tests/userprog/sc-bad-arg.ck tests/userprog/sc-bad-arg tests/userprog/sc-bad-arg.result
pass tests/userprog/sc-bad-arg
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/sc-boundary -a sc-boundary -- -q  -f run sc-boundary < /dev/null 2> tests/userprog/sc-boundary.errors > tests/userprog/sc-boundary.output
perl -I../.. ../../tests/userprog/sc-boundary.ck tests/userprog/sc-boundary tests/userprog/sc-boundary.result
pass tests/userprog/sc-boundary
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/sc-boundary-2 -a sc-boundary-2 -- -q  -f run sc-boundary-2 < /dev/null 2> tests/userprog/sc-boundary-2.errors > tests/userprog/sc-boundary-2.output
perl -I../.. ../../tests/userprog/sc-boundary-2.ck tests/userprog/sc-boundary-2 tests/userprog/sc-boundary-2.result
pass tests/userprog/sc-boundary-2
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/sc-boundary-3 -a sc-boundary-3 -- -q  -f run sc-boundary-3 < /dev/null 2> tests/userprog/sc-boundary-3.errors > tests/userprog/sc-boundary-3.output
perl -I../.. ../../tests/userprog/sc-boundary-3.ck tests/userprog/sc-boundary-3 tests/userprog/sc-boundary-3.result
pass tests/userprog/sc-boundary-3
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/halt -a halt -- -q  -f run halt < /dev/null 2> tests/userprog/halt.errors > tests/userprog/halt.output
perl -I../.. ../../tests/userprog/halt.ck tests/userprog/halt tests/userprog/halt.result
pass tests/userprog/halt
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/exit -a exit -- -q  -f run exit < /dev/null 2> tests/userprog/exit.errors > tests/userprog/exit.output
perl -I../.. ../../tests/userprog/exit.ck tests/userprog/exit tests/userprog/exit.result
pass tests/userprog/exit
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/create-normal -a create-normal -- -q  -f run create-normal < /dev/null 2> tests/userprog/create-normal.errors > tests/userprog/create-normal.output
perl -I../.. ../../tests/userprog/create-normal.ck tests/userprog/create-normal tests/userprog/create-normal.result
pass tests/userprog/create-normal
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/create-empty -a create-empty -- -q  -f run create-empty < /dev/null 2> tests/userprog/create-empty.errors > tests/userprog/create-empty.output
perl -I../.. ../../tests/userprog/create-empty.ck tests/userprog/create-empty tests/userprog/create-empty.result
pass tests/userprog/create-empty
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/create-null -a create-null -- -q  -f run create-null < /dev/null 2> tests/userprog/create-null.errors > tests/userprog/create-null.output
perl -I../.. ../../tests/userprog/create-null.ck tests/userprog/create-null tests/userprog/create-null.result
pass tests/userprog/create-null
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/create-bad-ptr -a create-bad-ptr -- -q  -f run create-bad-ptr < /dev/null 2> tests/userprog/create-bad-ptr.errors > tests/userprog/create-bad-ptr.output
perl -I../.. ../../tests/userprog/create-bad-ptr.ck tests/userprog/create-bad-ptr tests/userprog/create-bad-ptr.result
pass tests/userprog/create-bad-ptr
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/create-long -a create-long -- -q  -f run create-long < /dev/null 2> tests/userprog/create-long.errors > tests/userprog/create-long.output
perl -I../.. ../../tests/userprog/create-long.ck tests/userprog/create-long tests/userprog/create-long.result
pass tests/userprog/create-long
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/create-exists -a create-exists -- -q  -f run create-exists < /dev/null 2> tests/userprog/create-exists.errors > tests/userprog/create-exists.output
perl -I../.. ../../tests/userprog/create-exists.ck tests/userprog/create-exists tests/userprog/create-exists.result
pass tests/userprog/create-exists
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/create-bound -a create-bound -- -q  -f run create-bound < /dev/null 2> tests/userprog/create-bound.errors > tests/userprog/create-bound.output
perl -I../.. ../../tests/userprog/create-bound.ck tests/userprog/create-bound tests/userprog/create-bound.result
pass tests/userprog/create-bound
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/open-normal -a open-normal -p ../../tests/userprog/sample.txt -a sample.txt -- -q  -f run open-normal < /dev/null 2> tests/userprog/open-normal.errors > tests/userprog/open-normal.output
perl -I../.. ../../tests/userprog/open-normal.ck tests/userprog/open-normal tests/userprog/open-normal.result
FAIL tests/userprog/open-normal
Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a1c8 0x80480b2 0x80480f9 0x804873a
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/userprog/open-normal:
0x0804a1c8: open (...../lib/user/syscall.c:110)
0x080480b2: test_main (...userprog/open-normal.c:11)
0x080480f9: main (...ild/../../tests/main.c:13)
0x0804873a: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/open-missing -a open-missing -- -q  -f run open-missing < /dev/null 2> tests/userprog/open-missing.errors > tests/userprog/open-missing.output
perl -I../.. ../../tests/userprog/open-missing.ck tests/userprog/open-missing tests/userprog/open-missing.result
FAIL tests/userprog/open-missing
Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a1c8 0x80480b2 0x80480f9 0x804873a
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/userprog/open-missing:
0x0804a1c8: open (...../lib/user/syscall.c:110)
0x080480b2: test_main (...serprog/open-missing.c:11)
0x080480f9: main (...ild/../../tests/main.c:13)
0x0804873a: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/open-boundary -a open-boundary -p ../../tests/userprog/sample.txt -a sample.txt -- -q  -f run open-boundary < /dev/null 2> tests/userprog/open-boundary.errors > tests/userprog/open-boundary.output
perl -I../.. ../../tests/userprog/open-boundary.ck tests/userprog/open-boundary tests/userprog/open-boundary.result
FAIL tests/userprog/open-boundary
Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a278 0x80480c6 0x80481a1 0x80487ea
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/userprog/open-boundary:
0x0804a278: open (...../lib/user/syscall.c:110)
0x080480c6: test_main (...erprog/open-boundary.c:12)
0x080481a1: main (...ild/../../tests/main.c:13)
0x080487ea: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/open-empty -a open-empty -- -q  -f run open-empty < /dev/null 2> tests/userprog/open-empty.errors > tests/userprog/open-empty.output
perl -I../.. ../../tests/userprog/open-empty.ck tests/userprog/open-empty tests/userprog/open-empty.result
FAIL tests/userprog/open-empty
Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a1c8 0x80480b2 0x80480f9 0x804873a
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/userprog/open-empty:
0x0804a1c8: open (...../lib/user/syscall.c:110)
0x080480b2: test_main (.../userprog/open-empty.c:11)
0x080480f9: main (...ild/../../tests/main.c:13)
0x0804873a: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/open-null -a open-null -- -q  -f run open-null < /dev/null 2> tests/userprog/open-null.errors > tests/userprog/open-null.output
perl -I../.. ../../tests/userprog/open-null.ck tests/userprog/open-null tests/userprog/open-null.result
FAIL tests/userprog/open-null
Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a1b8 0x80480b2 0x80480e4 0x804872a
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/userprog/open-null:
0x0804a1b8: open (...../lib/user/syscall.c:110)
0x080480b2: test_main (...s/userprog/open-null.c:12)
0x080480e4: main (...ild/../../tests/main.c:13)
0x0804872a: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/open-bad-ptr -a open-bad-ptr -- -q  -f run open-bad-ptr < /dev/null 2> tests/userprog/open-bad-ptr.errors > tests/userprog/open-bad-ptr.output
perl -I../.. ../../tests/userprog/open-bad-ptr.ck tests/userprog/open-bad-ptr tests/userprog/open-bad-ptr.result
FAIL tests/userprog/open-bad-ptr
Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a1d8 0x80480b2 0x80480fe 0x804874a
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/userprog/open-bad-ptr:
0x0804a1d8: open (...../lib/user/syscall.c:110)
0x080480b2: test_main (...serprog/open-bad-ptr.c:11)
0x080480fe: main (...ild/../../tests/main.c:13)
0x0804874a: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/open-twice -a open-twice -p ../../tests/userprog/sample.txt -a sample.txt -- -q  -f run open-twice < /dev/null 2> tests/userprog/open-twice.errors > tests/userprog/open-twice.output
perl -I../.. ../../tests/userprog/open-twice.ck tests/userprog/open-twice tests/userprog/open-twice.result
FAIL tests/userprog/open-twice
Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a228 0x80480b3 0x804815d 0x804879a
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/userprog/open-twice:
0x0804a228: open (...../lib/user/syscall.c:110)
0x080480b3: test_main (.../userprog/open-twice.c:13)
0x0804815d: main (...ild/../../tests/main.c:13)
0x0804879a: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/close-normal -a close-normal -p ../../tests/userprog/sample.txt -a sample.txt -- -q  -f run close-normal < /dev/null 2> tests/userprog/close-normal.errors > tests/userprog/close-normal.output
perl -I../.. ../../tests/userprog/close-normal.ck tests/userprog/close-normal tests/userprog/close-normal.result
FAIL tests/userprog/close-normal
Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a1e8 0x80480bf 0x804811c 0x804875a
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/userprog/close-normal:
0x0804a1e8: open (...../lib/user/syscall.c:110)
0x080480bf: test_main (...serprog/close-normal.c:11)
0x0804811c: main (...ild/../../tests/main.c:13)
0x0804875a: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/close-twice -a close-twice -p ../../tests/userprog/sample.txt -a sample.txt -- -q  -f run close-twice < /dev/null 2> tests/userprog/close-twice.errors > tests/userprog/close-twice.output
perl -I../.. ../../tests/userprog/close-twice.ck tests/userprog/close-twice tests/userprog/close-twice.result
FAIL tests/userprog/close-twice
Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a208 0x80480bf 0x8048130 0x804877a
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/userprog/close-twice:
0x0804a208: open (...../lib/user/syscall.c:110)
0x080480bf: test_main (...userprog/close-twice.c:13)
0x08048130: main (...ild/../../tests/main.c:13)
0x0804877a: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/close-stdin -a close-stdin -- -q  -f run close-stdin < /dev/null 2> tests/userprog/close-stdin.errors > tests/userprog/close-stdin.output
perl -I../.. ../../tests/userprog/close-stdin.ck tests/userprog/close-stdin tests/userprog/close-stdin.result
FAIL tests/userprog/close-stdin
Kernel panic in run: PANIC at ../../userprog/syscall.c:294 in close(): assertion `0' failed.
Call stack: 0xc002855c 0xc002b980 0xc002be7f 0xc00219f6 0xc0021b2d 0x804a229 0x80480b2 0x80480e4 0x804872a
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002b980: tell (...../userprog/syscall.c:290)
0xc002be7f: syscall_handler (...../userprog/syscall.c:170)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/userprog/close-stdin:
0x0804a229: close (...../lib/user/syscall.c:146)
0x080480b2: test_main (...userprog/close-stdin.c:11)
0x080480e4: main (...ild/../../tests/main.c:13)
0x0804872a: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/close-stdout -a close-stdout -- -q  -f run close-stdout < /dev/null 2> tests/userprog/close-stdout.errors > tests/userprog/close-stdout.output
perl -I../.. ../../tests/userprog/close-stdout.ck tests/userprog/close-stdout tests/userprog/close-stdout.result
FAIL tests/userprog/close-stdout
Kernel panic in run: PANIC at ../../userprog/syscall.c:294 in close(): assertion `0' failed.
Call stack: 0xc002855c 0xc002b980 0xc002be7f 0xc00219f6 0xc0021b2d 0x804a229 0x80480b2 0x80480e4 0x804872a
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002b980: tell (...../userprog/syscall.c:290)
0xc002be7f: syscall_handler (...../userprog/syscall.c:170)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/userprog/close-stdout:
0x0804a229: close (...../lib/user/syscall.c:146)
0x080480b2: test_main (...serprog/close-stdout.c:11)
0x080480e4: main (...ild/../../tests/main.c:13)
0x0804872a: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/close-bad-fd -a close-bad-fd -- -q  -f run close-bad-fd < /dev/null 2> tests/userprog/close-bad-fd.errors > tests/userprog/close-bad-fd.output
perl -I../.. ../../tests/userprog/close-bad-fd.ck tests/userprog/close-bad-fd tests/userprog/close-bad-fd.result
FAIL tests/userprog/close-bad-fd
Kernel panic in run: PANIC at ../../userprog/syscall.c:294 in close(): assertion `0' failed.
Call stack: 0xc002855c 0xc002b980 0xc002be7f 0xc00219f6 0xc0021b2d 0x804a229 0x80480b2 0x80480e4 0x804872a
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002b980: tell (...../userprog/syscall.c:290)
0xc002be7f: syscall_handler (...../userprog/syscall.c:170)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/userprog/close-bad-fd:
0x0804a229: close (...../lib/user/syscall.c:146)
0x080480b2: test_main (...serprog/close-bad-fd.c:11)
0x080480e4: main (...ild/../../tests/main.c:13)
0x0804872a: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/read-normal -a read-normal -p ../../tests/userprog/sample.txt -a sample.txt -- -q  -f run read-normal < /dev/null 2> tests/userprog/read-normal.errors > tests/userprog/read-normal.output
perl -I../.. ../../tests/userprog/read-normal.ck tests/userprog/read-normal tests/userprog/read-normal.result
FAIL tests/userprog/read-normal
Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a1c8 0x80485bb 0x80480c2 0x80480f4 0x804873a
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/userprog/read-normal:
0x0804a1c8: open (...../lib/user/syscall.c:110)
0x080485bb: check_file (...ild/../../tests/lib.c:155)
0x080480c2: test_main (...userprog/read-normal.c:11)
0x080480f4: main (...ild/../../tests/main.c:13)
0x0804873a: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/read-bad-ptr -a read-bad-ptr -p ../../tests/userprog/sample.txt -a sample.txt -- -q  -f run read-bad-ptr < /dev/null 2> tests/userprog/read-bad-ptr.errors > tests/userprog/read-bad-ptr.output
perl -I../.. ../../tests/userprog/read-bad-ptr.ck tests/userprog/read-bad-ptr tests/userprog/read-bad-ptr.result
FAIL tests/userprog/read-bad-ptr
Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a1f8 0x80480be 0x8048123 0x804876a
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/userprog/read-bad-ptr:
0x0804a1f8: open (...../lib/user/syscall.c:110)
0x080480be: test_main (...serprog/read-bad-ptr.c:12)
0x08048123: main (...ild/../../tests/main.c:13)
0x0804876a: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/read-boundary -a read-boundary -p ../../tests/userprog/sample.txt -a sample.txt -- -q  -f run read-boundary < /dev/null 2> tests/userprog/read-boundary.errors > tests/userprog/read-boundary.output
perl -I../.. ../../tests/userprog/read-boundary.ck tests/userprog/read-boundary tests/userprog/read-boundary.result
FAIL tests/userprog/read-boundary
Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a2f8 0x80480c0 0x8048221 0x804886a
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/userprog/read-boundary:
0x0804a2f8: open (...../lib/user/syscall.c:110)
0x080480c0: test_main (...erprog/read-boundary.c:18)
0x08048221: main (...ild/../../tests/main.c:13)
0x0804886a: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/read-zero -a read-zero -p ../../tests/userprog/sample.txt -a sample.txt -- -q  -f run read-zero < /dev/null 2> tests/userprog/read-zero.errors > tests/userprog/read-zero.output
perl -I../.. ../../tests/userprog/read-zero.ck tests/userprog/read-zero tests/userprog/read-zero.result
FAIL tests/userprog/read-zero
Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a218 0x80480be 0x8048142 0x804878a
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/userprog/read-zero:
0x0804a218: open (...../lib/user/syscall.c:110)
0x080480be: test_main (...s/userprog/read-zero.c:14)
0x08048142: main (...ild/../../tests/main.c:13)
0x0804878a: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/read-stdout -a read-stdout -- -q  -f run read-stdout < /dev/null 2> tests/userprog/read-stdout.errors > tests/userprog/read-stdout.output
perl -I../.. ../../tests/userprog/read-stdout.ck tests/userprog/read-stdout tests/userprog/read-stdout.result
pass tests/userprog/read-stdout
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/read-bad-fd -a read-bad-fd -- -q  -f run read-bad-fd < /dev/null 2> tests/userprog/read-bad-fd.errors > tests/userprog/read-bad-fd.output
perl -I../.. ../../tests/userprog/read-bad-fd.ck tests/userprog/read-bad-fd tests/userprog/read-bad-fd.result
FAIL tests/userprog/read-bad-fd
Kernel panic in run: PANIC at ../../userprog/syscall.c:284 in read(): assertion `0' failed.
Call stack: 0xc002855c 0xc002bc2e 0xc002be26 0xc00219f6 0xc0021b2d 0x804a27f 0x80480c2 0x8048188 0x80487ca
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002bc2e: halt (...../userprog/syscall.c:207)
0xc002be26: syscall_handler (...../userprog/syscall.c:152)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/userprog/read-bad-fd:
0x0804a27f: read (...../lib/user/syscall.c:122)
0x080480c2: test_main (...userprog/read-bad-fd.c:15)
0x08048188: main (...ild/../../tests/main.c:13)
0x080487ca: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/write-normal -a write-normal -p ../../tests/userprog/sample.txt -a sample.txt -- -q  -f run write-normal < /dev/null 2> tests/userprog/write-normal.errors > tests/userprog/write-normal.output
perl -I../.. ../../tests/userprog/write-normal.ck tests/userprog/write-normal tests/userprog/write-normal.result
FAIL tests/userprog/write-normal
Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a238 0x80480ee 0x8048168 0x80487aa
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/userprog/write-normal:
0x0804a238: open (...../lib/user/syscall.c:110)
0x080480ee: test_main (...serprog/write-normal.c:14)
0x08048168: main (...ild/../../tests/main.c:13)
0x080487aa: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/write-bad-ptr -a write-bad-ptr -p ../../tests/userprog/sample.txt -a sample.txt -- -q  -f run write-bad-ptr < /dev/null 2> tests/userprog/write-bad-ptr.errors > tests/userprog/write-bad-ptr.output
perl -I../.. ../../tests/userprog/write-bad-ptr.ck tests/userprog/write-bad-ptr tests/userprog/write-bad-ptr.result
FAIL tests/userprog/write-bad-ptr
Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a1f8 0x80480be 0x8048123 0x804876a
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/userprog/write-bad-ptr:
0x0804a1f8: open (...../lib/user/syscall.c:110)
0x080480be: test_main (...erprog/write-bad-ptr.c:12)
0x08048123: main (...ild/../../tests/main.c:13)
0x0804876a: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/write-boundary -a write-boundary -p ../../tests/userprog/sample.txt -a sample.txt -- -q  -f run write-boundary < /dev/null 2> tests/userprog/write-boundary.errors > tests/userprog/write-boundary.output
perl -I../.. ../../tests/userprog/write-boundary.ck tests/userprog/write-boundary tests/userprog/write-boundary.result
FAIL tests/userprog/write-boundary
Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a2b8 0x80480cd 0x80481df 0x804882a
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/userprog/write-boundary:
0x0804a2b8: open (...../lib/user/syscall.c:110)
0x080480cd: test_main (...rprog/write-boundary.c:20)
0x080481df: main (...ild/../../tests/main.c:13)
0x0804882a: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/write-zero -a write-zero -p ../../tests/userprog/sample.txt -a sample.txt -- -q  -f run write-zero < /dev/null 2> tests/userprog/write-zero.errors > tests/userprog/write-zero.output
perl -I../.. ../../tests/userprog/write-zero.ck tests/userprog/write-zero tests/userprog/write-zero.result
FAIL tests/userprog/write-zero
Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a208 0x80480be 0x8048130 0x804877a
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/userprog/write-zero:
0x0804a208: open (...../lib/user/syscall.c:110)
0x080480be: test_main (.../userprog/write-zero.c:14)
0x08048130: main (...ild/../../tests/main.c:13)
0x0804877a: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/write-stdin -a write-stdin -- -q  -f run write-stdin < /dev/null 2> tests/userprog/write-stdin.errors > tests/userprog/write-stdin.output
perl -I../.. ../../tests/userprog/write-stdin.ck tests/userprog/write-stdin tests/userprog/write-stdin.result
pass tests/userprog/write-stdin
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/write-bad-fd -a write-bad-fd -- -q  -f run write-bad-fd < /dev/null 2> tests/userprog/write-bad-fd.errors > tests/userprog/write-bad-fd.output
perl -I../.. ../../tests/userprog/write-bad-fd.ck tests/userprog/write-bad-fd tests/userprog/write-bad-fd.result
pass tests/userprog/write-bad-fd
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/exec-once -a exec-once -p tests/userprog/child-simple -a child-simple -- -q  -f run exec-once < /dev/null 2> tests/userprog/exec-once.errors > tests/userprog/exec-once.output
perl -I../.. ../../tests/userprog/exec-once.ck tests/userprog/exec-once tests/userprog/exec-once.result
FAIL tests/userprog/exec-once
Test output failed to match any acceptable form.

Acceptable output:
  (exec-once) begin
  (child-simple) run
  child-simple: exit(81)
  (exec-once) end
  exec-once: exit(0)
Differences in `diff -u' format:
  (exec-once) begin
  (child-simple) run
  child-simple: exit(81)
- (exec-once) end
- exec-once: exit(0)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/exec-arg -a exec-arg -p tests/userprog/child-args -a child-args -- -q  -f run exec-arg < /dev/null 2> tests/userprog/exec-arg.errors > tests/userprog/exec-arg.output
perl -I../.. ../../tests/userprog/exec-arg.ck tests/userprog/exec-arg tests/userprog/exec-arg.result
FAIL tests/userprog/exec-arg
Test output failed to match any acceptable form.

Acceptable output:
  (exec-arg) begin
  (args) begin
  (args) argc = 2
  (args) argv[0] = 'child-args'
  (args) argv[1] = 'childarg'
  (args) argv[2] = null
  (args) end
  child-args: exit(0)
  (exec-arg) end
  exec-arg: exit(0)
Differences in `diff -u' format:
  (exec-arg) begin
  (args) begin
  (args) argc = 2
  (args) argv[0] = 'child-args'
  (args) argv[1] = 'childarg'
  (args) argv[2] = null
  (args) end
  child-args: exit(0)
- (exec-arg) end
- exec-arg: exit(0)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/exec-bound -a exec-bound -p tests/userprog/child-args -a child-args -- -q  -f run exec-bound < /dev/null 2> tests/userprog/exec-bound.errors > tests/userprog/exec-bound.output
perl -I../.. ../../tests/userprog/exec-bound.ck tests/userprog/exec-bound tests/userprog/exec-bound.result
FAIL tests/userprog/exec-bound
Test output failed to match any acceptable form.

Acceptable output:
  (exec-bound) begin
  (args) begin
  (args) argc = 3
  (args) argv[0] = 'child-args'
  (args) argv[1] = 'arg1'
  (args) argv[2] = 'arg2'
  (args) argv[3] = null
  (args) end
  child-args: exit(0)
  (exec-bound) end
  exec-bound: exit(0)
Differences in `diff -u' format:
  (exec-bound) begin
  (args) begin
  (args) argc = 3
  (args) argv[0] = 'child-args'
  (args) argv[1] = 'arg1'
  (args) argv[2] = 'arg2'
  (args) argv[3] = null
  (args) end
  child-args: exit(0)
- (exec-bound) end
- exec-bound: exit(0)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/exec-bound-2 -a exec-bound-2 -- -q  -f run exec-bound-2 < /dev/null 2> tests/userprog/exec-bound-2.errors > tests/userprog/exec-bound-2.output
perl -I../.. ../../tests/userprog/exec-bound-2.ck tests/userprog/exec-bound-2 tests/userprog/exec-bound-2.result
pass tests/userprog/exec-bound-2
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/exec-bound-3 -a exec-bound-3 -- -q  -f run exec-bound-3 < /dev/null 2> tests/userprog/exec-bound-3.errors > tests/userprog/exec-bound-3.output
perl -I../.. ../../tests/userprog/exec-bound-3.ck tests/userprog/exec-bound-3 tests/userprog/exec-bound-3.result
pass tests/userprog/exec-bound-3
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/exec-multiple -a exec-multiple -p tests/userprog/child-simple -a child-simple -- -q  -f run exec-multiple < /dev/null 2> tests/userprog/exec-multiple.errors > tests/userprog/exec-multiple.output
perl -I../.. ../../tests/userprog/exec-multiple.ck tests/userprog/exec-multiple tests/userprog/exec-multiple.result
FAIL tests/userprog/exec-multiple
Test output failed to match any acceptable form.

Acceptable output:
  (exec-multiple) begin
  (child-simple) run
  child-simple: exit(81)
  (child-simple) run
  child-simple: exit(81)
  (child-simple) run
  child-simple: exit(81)
  (child-simple) run
  child-simple: exit(81)
  (exec-multiple) end
  exec-multiple: exit(0)
Differences in `diff -u' format:
  (exec-multiple) begin
  (child-simple) run
  child-simple: exit(81)
- (child-simple) run
- child-simple: exit(81)
- (child-simple) run
- child-simple: exit(81)
- (child-simple) run
- child-simple: exit(81)
- (exec-multiple) end
- exec-multiple: exit(0)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/exec-missing -a exec-missing -- -q  -f run exec-missing < /dev/null 2> tests/userprog/exec-missing.errors > tests/userprog/exec-missing.output
perl -I../.. ../../tests/userprog/exec-missing.ck tests/userprog/exec-missing tests/userprog/exec-missing.result
pass tests/userprog/exec-missing
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/exec-bad-ptr -a exec-bad-ptr -- -q  -f run exec-bad-ptr < /dev/null 2> tests/userprog/exec-bad-ptr.errors > tests/userprog/exec-bad-ptr.output
perl -I../.. ../../tests/userprog/exec-bad-ptr.ck tests/userprog/exec-bad-ptr tests/userprog/exec-bad-ptr.result
pass tests/userprog/exec-bad-ptr
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/wait-simple -a wait-simple -p tests/userprog/child-simple -a child-simple -- -q  -f run wait-simple < /dev/null 2> tests/userprog/wait-simple.errors > tests/userprog/wait-simple.output
perl -I../.. ../../tests/userprog/wait-simple.ck tests/userprog/wait-simple tests/userprog/wait-simple.result
FAIL tests/userprog/wait-simple
Test output failed to match any acceptable form.

Acceptable output:
  (wait-simple) begin
  (child-simple) run
  child-simple: exit(81)
  (wait-simple) wait(exec()) = 81
  (wait-simple) end
  wait-simple: exit(0)
Differences in `diff -u' format:
  (wait-simple) begin
  (child-simple) run
  child-simple: exit(81)
- (wait-simple) wait(exec()) = 81
- (wait-simple) end
- wait-simple: exit(0)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/wait-twice -a wait-twice -p tests/userprog/child-simple -a child-simple -- -q  -f run wait-twice < /dev/null 2> tests/userprog/wait-twice.errors > tests/userprog/wait-twice.output
perl -I../.. ../../tests/userprog/wait-twice.ck tests/userprog/wait-twice tests/userprog/wait-twice.result
FAIL tests/userprog/wait-twice
Test output failed to match any acceptable form.

Acceptable output:
  (wait-twice) begin
  (child-simple) run
  child-simple: exit(81)
  (wait-twice) wait(exec()) = 81
  (wait-twice) wait(exec()) = -1
  (wait-twice) end
  wait-twice: exit(0)
Differences in `diff -u' format:
  (wait-twice) begin
  (child-simple) run
  child-simple: exit(81)
- (wait-twice) wait(exec()) = 81
- (wait-twice) wait(exec()) = -1
- (wait-twice) end
- wait-twice: exit(0)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/wait-killed -a wait-killed -p tests/userprog/child-bad -a child-bad -- -q  -f run wait-killed < /dev/null 2> tests/userprog/wait-killed.errors > tests/userprog/wait-killed.output
perl -I../.. ../../tests/userprog/wait-killed.ck tests/userprog/wait-killed tests/userprog/wait-killed.result
FAIL tests/userprog/wait-killed
Test output failed to match any acceptable form.

Acceptable output:
  (wait-killed) begin
  (child-bad) begin
  child-bad: exit(-1)
  (wait-killed) wait(exec()) = -1
  (wait-killed) end
  wait-killed: exit(0)
Differences in `diff -u' format:
  (wait-killed) begin
  (child-bad) begin
  child-bad: exit(-1)
- (wait-killed) wait(exec()) = -1
- (wait-killed) end
- wait-killed: exit(0)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/wait-bad-pid -a wait-bad-pid -- -q  -f run wait-bad-pid < /dev/null 2> tests/userprog/wait-bad-pid.errors > tests/userprog/wait-bad-pid.output
perl -I../.. ../../tests/userprog/wait-bad-pid.ck tests/userprog/wait-bad-pid tests/userprog/wait-bad-pid.result
FAIL tests/userprog/wait-bad-pid
Test output failed to match any acceptable form.

Acceptable output:
  (wait-bad-pid) begin
  (wait-bad-pid) end
  wait-bad-pid: exit(0)
Differences in `diff -u' format:
  (wait-bad-pid) begin
- (wait-bad-pid) end
- wait-bad-pid: exit(0)
Acceptable output:
  (wait-bad-pid) begin
  wait-bad-pid: exit(-1)
Differences in `diff -u' format:
  (wait-bad-pid) begin
- wait-bad-pid: exit(-1)
pintos -v -k -T 360 --bochs  --filesys-size=2 -p tests/userprog/multi-recurse -a multi-recurse -- -q  -f run 'multi-recurse 15' < /dev/null 2> tests/userprog/multi-recurse.errors > tests/userprog/multi-recurse.output
perl -I../.. ../../tests/userprog/multi-recurse.ck tests/userprog/multi-recurse tests/userprog/multi-recurse.result
FAIL tests/userprog/multi-recurse
Run didn't shut down properly: no "Timer: # ticks" message
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/multi-child-fd -a multi-child-fd -p ../../tests/userprog/sample.txt -a sample.txt -p tests/userprog/child-close -a child-close -- -q  -f run multi-child-fd < /dev/null 2> tests/userprog/multi-child-fd.errors > tests/userprog/multi-child-fd.output
perl -I../.. ../../tests/userprog/multi-child-fd.ck tests/userprog/multi-child-fd tests/userprog/multi-child-fd.result
FAIL tests/userprog/multi-child-fd
Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a248 0x80480c3 0x8048172 0x80487ba
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/userprog/multi-child-fd:
0x0804a248: open (...../lib/user/syscall.c:110)
0x080480c3: test_main (...rprog/multi-child-fd.c:18)
0x08048172: main (...ild/../../tests/main.c:13)
0x080487ba: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/rox-simple -a rox-simple -- -q  -f run rox-simple < /dev/null 2> tests/userprog/rox-simple.errors > tests/userprog/rox-simple.output
perl -I../.. ../../tests/userprog/rox-simple.ck tests/userprog/rox-simple tests/userprog/rox-simple.result
FAIL tests/userprog/rox-simple
Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a248 0x80480bf 0x804816f 0x80487ba
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/userprog/rox-simple:
0x0804a248: open (...../lib/user/syscall.c:110)
0x080480bf: test_main (.../userprog/rox-simple.c:14)
0x0804816f: main (...ild/../../tests/main.c:13)
0x080487ba: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/rox-child -a rox-child -p tests/userprog/child-rox -a child-rox -- -q  -f run rox-child < /dev/null 2> tests/userprog/rox-child.errors > tests/userprog/rox-child.output
perl -I../.. ../../tests/userprog/rox-child.ck tests/userprog/rox-child tests/userprog/rox-child.result
FAIL tests/userprog/rox-child
Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a308 0x80480c0 0x8048234 0x804887a
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/userprog/rox-child:
0x0804a308: open (...../lib/user/syscall.c:110)
0x080480c0: test_main (...userprog/rox-child.inc:16)
0x08048234: main (...ild/../../tests/main.c:13)
0x0804887a: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/rox-multichild -a rox-multichild -p tests/userprog/child-rox -a child-rox -- -q  -f run rox-multichild < /dev/null 2> tests/userprog/rox-multichild.errors > tests/userprog/rox-multichild.output
perl -I../.. ../../tests/userprog/rox-multichild.ck tests/userprog/rox-multichild tests/userprog/rox-multichild.result
FAIL tests/userprog/rox-multichild
Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a308 0x80480c0 0x8048234 0x804887a
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/userprog/rox-multichild:
0x0804a308: open (...../lib/user/syscall.c:110)
0x080480c0: test_main (...userprog/rox-child.inc:16)
0x08048234: main (...ild/../../tests/main.c:13)
0x0804887a: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/bad-read -a bad-read -- -q  -f run bad-read < /dev/null 2> tests/userprog/bad-read.errors > tests/userprog/bad-read.output
perl -I../.. ../../tests/userprog/bad-read.ck tests/userprog/bad-read tests/userprog/bad-read.result
pass tests/userprog/bad-read
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/bad-write -a bad-write -- -q  -f run bad-write < /dev/null 2> tests/userprog/bad-write.errors > tests/userprog/bad-write.output
perl -I../.. ../../tests/userprog/bad-write.ck tests/userprog/bad-write tests/userprog/bad-write.result
pass tests/userprog/bad-write
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/bad-read2 -a bad-read2 -- -q  -f run bad-read2 < /dev/null 2> tests/userprog/bad-read2.errors > tests/userprog/bad-read2.output
perl -I../.. ../../tests/userprog/bad-read2.ck tests/userprog/bad-read2 tests/userprog/bad-read2.result
pass tests/userprog/bad-read2
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/bad-write2 -a bad-write2 -- -q  -f run bad-write2 < /dev/null 2> tests/userprog/bad-write2.errors > tests/userprog/bad-write2.output
perl -I../.. ../../tests/userprog/bad-write2.ck tests/userprog/bad-write2 tests/userprog/bad-write2.result
pass tests/userprog/bad-write2
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/bad-jump -a bad-jump -- -q  -f run bad-jump < /dev/null 2> tests/userprog/bad-jump.errors > tests/userprog/bad-jump.output
perl -I../.. ../../tests/userprog/bad-jump.ck tests/userprog/bad-jump tests/userprog/bad-jump.result
pass tests/userprog/bad-jump
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/bad-jump2 -a bad-jump2 -- -q  -f run bad-jump2 < /dev/null 2> tests/userprog/bad-jump2.errors > tests/userprog/bad-jump2.output
perl -I../.. ../../tests/userprog/bad-jump2.ck tests/userprog/bad-jump2 tests/userprog/bad-jump2.result
pass tests/userprog/bad-jump2
pintos -v -k -T 360 --bochs  --filesys-size=2 -p tests/userprog/no-vm/multi-oom -a multi-oom -- -q  -f run multi-oom < /dev/null 2> tests/userprog/no-vm/multi-oom.errors > tests/userprog/no-vm/multi-oom.output
perl -I../.. ../../tests/userprog/no-vm/multi-oom.ck tests/userprog/no-vm/multi-oom tests/userprog/no-vm/multi-oom.result
FAIL tests/userprog/no-vm/multi-oom
Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a818 0x80480b9 0x80480da 0x804823b 0x80489aa
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/userprog/no-vm/multi-oom:
0x0804a818: open (...../lib/user/syscall.c:110)
0x080480b9: consume_some_resources (...prog/no-vm/multi-oom.c:57)
0x080480da: consume_some_resources_and_die (...prog/no-vm/multi-oom.c:67)
0x0804823b: main (...rog/no-vm/multi-oom.c:119)
0x080489aa: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/filesys/base/lg-create -a lg-create -- -q  -f run lg-create < /dev/null 2> tests/filesys/base/lg-create.errors > tests/filesys/base/lg-create.output
perl -I../.. ../../tests/filesys/base/lg-create.ck tests/filesys/base/lg-create tests/filesys/base/lg-create.result
FAIL tests/filesys/base/lg-create
Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a348 0x80485bb 0x8048102 0x8048893 0x80488be
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/filesys/base/lg-create:
0x0804a348: open (...../lib/user/syscall.c:110)
0x080485bb: check_file (...ild/../../tests/lib.c:155)
0x08048102: test_main (...sts/filesys/create.inc:15)
0x08048893: main (...ild/../../tests/main.c:13)
0x080488be: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/filesys/base/lg-full -a lg-full -- -q  -f run lg-full < /dev/null 2> tests/filesys/base/lg-full.errors > tests/filesys/base/lg-full.output
perl -I../.. ../../tests/filesys/base/lg-full.ck tests/filesys/base/lg-full tests/filesys/base/lg-full.result
FAIL tests/filesys/base/lg-full
Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a328 0x8048777 0x80480e4 0x8048873 0x804889e
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/filesys/base/lg-full:
0x0804a328: open (...../lib/user/syscall.c:110)
0x08048777: seq_test (...sts/filesys/seq-test.c:16)
0x080480e4: test_main (.../filesys/base/full.inc:20)
0x08048873: main (...ild/../../tests/main.c:13)
0x0804889e: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/filesys/base/lg-random -a lg-random -- -q  -f run lg-random < /dev/null 2> tests/filesys/base/lg-random.errors > tests/filesys/base/lg-random.output
perl -I../.. ../../tests/filesys/base/lg-random.ck tests/filesys/base/lg-random tests/filesys/base/lg-random.result
FAIL tests/filesys/base/lg-random
Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a528 0x8048143 0x8048a73 0x8048a9e
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/filesys/base/lg-random:
0x0804a528: open (...../lib/user/syscall.c:110)
0x08048143: test_main (...ilesys/base/random.inc:33)
0x08048a73: main (...ild/../../tests/main.c:13)
0x08048a9e: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/filesys/base/lg-seq-block -a lg-seq-block -- -q  -f run lg-seq-block < /dev/null 2> tests/filesys/base/lg-seq-block.errors > tests/filesys/base/lg-seq-block.output
perl -I../.. ../../tests/filesys/base/lg-seq-block.ck tests/filesys/base/lg-seq-block tests/filesys/base/lg-seq-block.result
FAIL tests/filesys/base/lg-seq-block
Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a328 0x8048777 0x80480e4 0x8048873 0x804889e
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/filesys/base/lg-seq-block:
0x0804a328: open (...../lib/user/syscall.c:110)
0x08048777: seq_test (...sts/filesys/seq-test.c:16)
0x080480e4: test_main (...sys/base/seq-block.inc:20)
0x08048873: main (...ild/../../tests/main.c:13)
0x0804889e: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/filesys/base/lg-seq-random -a lg-seq-random -- -q  -f run lg-seq-random < /dev/null 2> tests/filesys/base/lg-seq-random.errors > tests/filesys/base/lg-seq-random.output
perl -I../.. ../../tests/filesys/base/lg-seq-random.ck tests/filesys/base/lg-seq-random tests/filesys/base/lg-seq-random.result
FAIL tests/filesys/base/lg-seq-random
Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a348 0x8048797 0x80480e6 0x8048893 0x80488be
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/filesys/base/lg-seq-random:
0x0804a348: open (...../lib/user/syscall.c:110)
0x08048797: seq_test (...sts/filesys/seq-test.c:16)
0x080480e6: test_main (...ys/base/seq-random.inc:22)
0x08048893: main (...ild/../../tests/main.c:13)
0x080488be: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/filesys/base/sm-create -a sm-create -- -q  -f run sm-create < /dev/null 2> tests/filesys/base/sm-create.errors > tests/filesys/base/sm-create.output
perl -I../.. ../../tests/filesys/base/sm-create.ck tests/filesys/base/sm-create tests/filesys/base/sm-create.result
FAIL tests/filesys/base/sm-create
Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a348 0x80485bb 0x8048102 0x8048893 0x80488be
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/filesys/base/sm-create:
0x0804a348: open (...../lib/user/syscall.c:110)
0x080485bb: check_file (...ild/../../tests/lib.c:155)
0x08048102: test_main (...sts/filesys/create.inc:15)
0x08048893: main (...ild/../../tests/main.c:13)
0x080488be: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/filesys/base/sm-full -a sm-full -- -q  -f run sm-full < /dev/null 2> tests/filesys/base/sm-full.errors > tests/filesys/base/sm-full.output
perl -I../.. ../../tests/filesys/base/sm-full.ck tests/filesys/base/sm-full tests/filesys/base/sm-full.result
FAIL tests/filesys/base/sm-full
Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a328 0x8048777 0x80480e4 0x8048873 0x804889e
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/filesys/base/sm-full:
0x0804a328: open (...../lib/user/syscall.c:110)
0x08048777: seq_test (...sts/filesys/seq-test.c:16)
0x080480e4: test_main (.../filesys/base/full.inc:20)
0x08048873: main (...ild/../../tests/main.c:13)
0x0804889e: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/filesys/base/sm-random -a sm-random -- -q  -f run sm-random < /dev/null 2> tests/filesys/base/sm-random.errors > tests/filesys/base/sm-random.output
perl -I../.. ../../tests/filesys/base/sm-random.ck tests/filesys/base/sm-random tests/filesys/base/sm-random.result
FAIL tests/filesys/base/sm-random
Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a4f8 0x804813e 0x8048a43 0x8048a6e
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/filesys/base/sm-random:
0x0804a4f8: open (...../lib/user/syscall.c:110)
0x0804813e: test_main (...ilesys/base/random.inc:33)
0x08048a43: main (...ild/../../tests/main.c:13)
0x08048a6e: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/filesys/base/sm-seq-block -a sm-seq-block -- -q  -f run sm-seq-block < /dev/null 2> tests/filesys/base/sm-seq-block.errors > tests/filesys/base/sm-seq-block.output
perl -I../.. ../../tests/filesys/base/sm-seq-block.ck tests/filesys/base/sm-seq-block tests/filesys/base/sm-seq-block.result
FAIL tests/filesys/base/sm-seq-block
Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a328 0x8048777 0x80480e4 0x8048873 0x804889e
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/filesys/base/sm-seq-block:
0x0804a328: open (...../lib/user/syscall.c:110)
0x08048777: seq_test (...sts/filesys/seq-test.c:16)
0x080480e4: test_main (...sys/base/seq-block.inc:20)
0x08048873: main (...ild/../../tests/main.c:13)
0x0804889e: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/filesys/base/sm-seq-random -a sm-seq-random -- -q  -f run sm-seq-random < /dev/null 2> tests/filesys/base/sm-seq-random.errors > tests/filesys/base/sm-seq-random.output
perl -I../.. ../../tests/filesys/base/sm-seq-random.ck tests/filesys/base/sm-seq-random tests/filesys/base/sm-seq-random.result
FAIL tests/filesys/base/sm-seq-random
Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a348 0x8048797 0x80480e6 0x8048893 0x80488be
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/filesys/base/sm-seq-random:
0x0804a348: open (...../lib/user/syscall.c:110)
0x08048797: seq_test (...sts/filesys/seq-test.c:16)
0x080480e6: test_main (...ys/base/seq-random.inc:22)
0x08048893: main (...ild/../../tests/main.c:13)
0x080488be: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.
pintos -v -k -T 300 --bochs  --filesys-size=2 -p tests/filesys/base/syn-read -a syn-read -p tests/filesys/base/child-syn-read -a child-syn-read -- -q  -f run syn-read < /dev/null 2> tests/filesys/base/syn-read.errors > tests/filesys/base/syn-read.output
perl -I../.. ../../tests/filesys/base/syn-read.ck tests/filesys/base/syn-read tests/filesys/base/syn-read.result
FAIL tests/filesys/base/syn-read
Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a408 0x8048107 0x8048953 0x804897e
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/filesys/base/syn-read:
0x0804a408: open (...../lib/user/syscall.c:110)
0x08048107: test_main (...ilesys/base/syn-read.c:23)
0x08048953: main (...ild/../../tests/main.c:13)
0x0804897e: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/filesys/base/syn-remove -a syn-remove -- -q  -f run syn-remove < /dev/null 2> tests/filesys/base/syn-remove.errors > tests/filesys/base/syn-remove.output
perl -I../.. ../../tests/filesys/base/syn-remove.ck tests/filesys/base/syn-remove tests/filesys/base/syn-remove.result
FAIL tests/filesys/base/syn-remove
Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a4a8 0x8048107 0x80489f3 0x8048a1e
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/filesys/base/syn-remove:
0x0804a4a8: open (...../lib/user/syscall.c:110)
0x08048107: test_main (...esys/base/syn-remove.c:20)
0x080489f3: main (...ild/../../tests/main.c:13)
0x08048a1e: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/filesys/base/syn-write -a syn-write -p tests/filesys/base/child-syn-wrt -a child-syn-wrt -- -q  -f run syn-write < /dev/null 2> tests/filesys/base/syn-write.errors > tests/filesys/base/syn-write.output
perl -I../.. ../../tests/filesys/base/syn-write.ck tests/filesys/base/syn-write tests/filesys/base/syn-write.result
FAIL tests/filesys/base/syn-write
Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a7a8 0x804812b 0x804893b
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
0x0804a7a8: (unknown)
In tests/filesys/base/syn-write:
0x0804812b: test_main (...lesys/base/syn-write.c:27)
0x0804893b: main (...uild/../../tests/main.c:7)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.
../../tests/make-grade ../.. results ../../tests/userprog/Grading | tee grade
warning: test tests/userprog/exec-bound doesn't count for grading
warning: test tests/userprog/sc-boundary-3 doesn't count for grading
warning: test tests/userprog/exec-bound-3 doesn't count for grading
warning: test tests/userprog/exec-bound-2 doesn't count for grading
TOTAL TESTING SCORE: 23.8%

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

SUMMARY BY TEST SET

Test Set                                      Pts Max  % Ttl  % Max
--------------------------------------------- --- --- ------ ------
tests/userprog/Rubric.functionality            35/108  11.3%/ 35.0%
tests/userprog/Rubric.robustness               44/ 88  12.5%/ 25.0%
tests/userprog/no-vm/Rubric                     0/  1   0.0%/ 10.0%
tests/filesys/base/Rubric                       0/ 30   0.0%/ 30.0%
--------------------------------------------- --- --- ------ ------
Total                                                  23.8%/100.0%

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

SUMMARY OF INDIVIDUAL TESTS

Functionality of system calls (tests/userprog/Rubric.functionality):
	- Test argument passing on Pintos command line.
	     3/ 3 tests/userprog/args-none
	     3/ 3 tests/userprog/args-single
	     3/ 3 tests/userprog/args-multiple
	     3/ 3 tests/userprog/args-many
	     3/ 3 tests/userprog/args-dbl-space

	- Test "create" system call.
	     3/ 3 tests/userprog/create-empty
	     3/ 3 tests/userprog/create-long
	     3/ 3 tests/userprog/create-normal
	     3/ 3 tests/userprog/create-exists

	- Test "open" system call.
	  ** 0/ 3 tests/userprog/open-missing
	  ** 0/ 3 tests/userprog/open-normal
	  ** 0/ 3 tests/userprog/open-twice

	- Test "read" system call.
	  ** 0/ 3 tests/userprog/read-normal
	  ** 0/ 3 tests/userprog/read-zero

	- Test "write" system call.
	  ** 0/ 3 tests/userprog/write-normal
	  ** 0/ 3 tests/userprog/write-zero

	- Test "close" system call.
	  ** 0/ 3 tests/userprog/close-normal

	- Test "exec" system call.
	  ** 0/ 5 tests/userprog/exec-once
	  ** 0/ 5 tests/userprog/exec-multiple
	  ** 0/ 5 tests/userprog/exec-arg

	- Test "wait" system call.
	  ** 0/ 5 tests/userprog/wait-simple
	  ** 0/ 5 tests/userprog/wait-twice

	- Test "exit" system call.
	     5/ 5 tests/userprog/exit

	- Test "halt" system call.
	     3/ 3 tests/userprog/halt

	- Test recursive execution of user programs.
	  ** 0/15 tests/userprog/multi-recurse

	- Test read-only executable feature.
	  ** 0/ 3 tests/userprog/rox-simple
	  ** 0/ 3 tests/userprog/rox-child
	  ** 0/ 3 tests/userprog/rox-multichild

	- Section summary.
	     11/ 28 tests passed
	     35/108 points subtotal

Robustness of system calls (tests/userprog/Rubric.robustness):
	- Test robustness of file descriptor handling.
	  ** 0/ 2 tests/userprog/close-stdin
	  ** 0/ 2 tests/userprog/close-stdout
	  ** 0/ 2 tests/userprog/close-bad-fd
	  ** 0/ 2 tests/userprog/close-twice
	  ** 0/ 2 tests/userprog/read-bad-fd
	     2/ 2 tests/userprog/read-stdout
	     2/ 2 tests/userprog/write-bad-fd
	     2/ 2 tests/userprog/write-stdin
	  ** 0/ 2 tests/userprog/multi-child-fd

	- Test robustness of pointer handling.
	     3/ 3 tests/userprog/create-bad-ptr
	     3/ 3 tests/userprog/exec-bad-ptr
	  ** 0/ 3 tests/userprog/open-bad-ptr
	  ** 0/ 3 tests/userprog/read-bad-ptr
	  ** 0/ 3 tests/userprog/write-bad-ptr

	- Test robustness of buffer copying across page boundaries.
	     3/ 3 tests/userprog/create-bound
	  ** 0/ 3 tests/userprog/open-boundary
	  ** 0/ 3 tests/userprog/read-boundary
	  ** 0/ 3 tests/userprog/write-boundary

	- Test handling of null pointer and empty strings.
	     2/ 2 tests/userprog/create-null
	  ** 0/ 2 tests/userprog/open-null
	  ** 0/ 2 tests/userprog/open-empty

	- Test robustness of system call implementation.
	     3/ 3 tests/userprog/sc-bad-arg
	     3/ 3 tests/userprog/sc-bad-sp
	     5/ 5 tests/userprog/sc-boundary
	     5/ 5 tests/userprog/sc-boundary-2

	- Test robustness of "exec" and "wait" system calls.
	     5/ 5 tests/userprog/exec-missing
	  ** 0/ 5 tests/userprog/wait-bad-pid
	  ** 0/ 5 tests/userprog/wait-killed

	- Test robustness of exception handling.
	     1/ 1 tests/userprog/bad-read
	     1/ 1 tests/userprog/bad-write
	     1/ 1 tests/userprog/bad-jump
	     1/ 1 tests/userprog/bad-read2
	     1/ 1 tests/userprog/bad-write2
	     1/ 1 tests/userprog/bad-jump2

	- Section summary.
	     18/ 34 tests passed
	     44/ 88 points subtotal

Functionality of features that VM might break (tests/userprog/no-vm/Rubric):

	  ** 0/ 1 tests/userprog/no-vm/multi-oom

	- Section summary.
	      0/  1 tests passed
	      0/  1 points subtotal

Functionality of base file system (tests/filesys/base/Rubric):
	- Test basic support for small files.
	  ** 0/ 1 tests/filesys/base/sm-create
	  ** 0/ 2 tests/filesys/base/sm-full
	  ** 0/ 2 tests/filesys/base/sm-random
	  ** 0/ 2 tests/filesys/base/sm-seq-block
	  ** 0/ 3 tests/filesys/base/sm-seq-random

	- Test basic support for large files.
	  ** 0/ 1 tests/filesys/base/lg-create
	  ** 0/ 2 tests/filesys/base/lg-full
	  ** 0/ 2 tests/filesys/base/lg-random
	  ** 0/ 2 tests/filesys/base/lg-seq-block
	  ** 0/ 3 tests/filesys/base/lg-seq-random

	- Test synchronized multiprogram access to files.
	  ** 0/ 4 tests/filesys/base/syn-read
	  ** 0/ 4 tests/filesys/base/syn-write
	  ** 0/ 2 tests/filesys/base/syn-remove

	- Section summary.
	      0/ 13 tests passed
	      0/ 30 points subtotal


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

DETAILS OF tests/userprog/open-missing FAILURE:

Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a1c8 0x80480b2 0x80480f9 0x804873a
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/userprog/open-missing:
0x0804a1c8: open (...../lib/user/syscall.c:110)
0x080480b2: test_main (...serprog/open-missing.c:11)
0x080480f9: main (...ild/../../tests/main.c:13)
0x0804873a: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.

OUTPUT FROM tests/userprog/open-missing:

Copying tests/userprog/open-missing to scratch partition...
squish-pty bochs -q
========================================================================
                       Bochs x86 Emulator 2.6.2
                Built from SVN snapshot on May 26, 2013
                  Compiled on Jun 26 2021 at 01:03:24
========================================================================
PiLo hda1
Loading.........
Kernel command line: -q -f extract run open-missing
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  196,000 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 100 sectors (50 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'open-missing' into the file system...
Erasing ustar archive...
Executing 'open-missing':
(open-missing) begin
Kernel PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a1c8 0x80480b2 0x80480f9 0x804873a.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 267 ticks
Thread: 0 idle ticks, 243 kernel ticks, 24 user ticks
hda2 (filesys): 63 reads, 204 writes
hda3 (scratch): 99 reads, 2 writes
Console: 1166 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off..
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

DETAILS OF tests/userprog/open-normal FAILURE:

Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a1c8 0x80480b2 0x80480f9 0x804873a
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/userprog/open-normal:
0x0804a1c8: open (...../lib/user/syscall.c:110)
0x080480b2: test_main (...userprog/open-normal.c:11)
0x080480f9: main (...ild/../../tests/main.c:13)
0x0804873a: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.

OUTPUT FROM tests/userprog/open-normal:

Copying tests/userprog/open-normal to scratch partition...
Copying ../../tests/userprog/sample.txt to scratch partition...
squish-pty bochs -q
========================================================================
                       Bochs x86 Emulator 2.6.2
                Built from SVN snapshot on May 26, 2013
                  Compiled on Jun 26 2021 at 01:03:24
========================================================================
PiLo hda1
Loading.........
Kernel command line: -q -f extract run open-normal
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  196,000 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 102 sectors (51 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'open-normal' into the file system...
Putting 'sample.txt' into the file system...
Erasing ustar archive...
Executing 'open-normal':
(open-normal) begin
Kernel PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a1c8 0x80480b2 0x80480f9 0x804873a.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 291 ticks
Thread: 0 idle ticks, 267 kernel ticks, 24 user ticks
hda2 (filesys): 88 reads, 210 writes
hda3 (scratch): 101 reads, 2 writes
Console: 1208 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off..
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

DETAILS OF tests/userprog/open-twice FAILURE:

Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a228 0x80480b3 0x804815d 0x804879a
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/userprog/open-twice:
0x0804a228: open (...../lib/user/syscall.c:110)
0x080480b3: test_main (.../userprog/open-twice.c:13)
0x0804815d: main (...ild/../../tests/main.c:13)
0x0804879a: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.

OUTPUT FROM tests/userprog/open-twice:

Copying tests/userprog/open-twice to scratch partition...
Copying ../../tests/userprog/sample.txt to scratch partition...
squish-pty bochs -q
========================================================================
                       Bochs x86 Emulator 2.6.2
                Built from SVN snapshot on May 26, 2013
                  Compiled on Jun 26 2021 at 01:03:24
========================================================================
PiLo hda1
Loading.........
Kernel command line: -q -f extract run open-twice
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  196,000 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 103 sectors (51 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'open-twice' into the file system...
Putting 'sample.txt' into the file system...
Erasing ustar archive...
Executing 'open-twice':
(open-twice) begin
Kernel PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a228 0x80480b3 0x804815d 0x804879a.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 295 ticks
Thread: 0 idle ticks, 271 kernel ticks, 24 user ticks
hda2 (filesys): 88 reads, 212 writes
hda3 (scratch): 102 reads, 2 writes
Console: 1204 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off..
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

DETAILS OF tests/userprog/read-normal FAILURE:

Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a1c8 0x80485bb 0x80480c2 0x80480f4 0x804873a
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/userprog/read-normal:
0x0804a1c8: open (...../lib/user/syscall.c:110)
0x080485bb: check_file (...ild/../../tests/lib.c:155)
0x080480c2: test_main (...userprog/read-normal.c:11)
0x080480f4: main (...ild/../../tests/main.c:13)
0x0804873a: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.

OUTPUT FROM tests/userprog/read-normal:

Copying tests/userprog/read-normal to scratch partition...
Copying ../../tests/userprog/sample.txt to scratch partition...
squish-pty bochs -q
========================================================================
                       Bochs x86 Emulator 2.6.2
                Built from SVN snapshot on May 26, 2013
                  Compiled on Jun 26 2021 at 01:03:24
========================================================================
PiLo hda1
Loading.........
Kernel command line: -q -f extract run read-normal
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  196,000 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 103 sectors (51 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'read-normal' into the file system...
Putting 'sample.txt' into the file system...
Erasing ustar archive...
Executing 'read-normal':
(read-normal) begin
(read-normal) open "sample.txt" for verification
Kernel PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a1c8 0x80485bb 0x80480c2 0x80480f4 0x804873a.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 301 ticks
Thread: 0 idle ticks, 271 kernel ticks, 30 user ticks
hda2 (filesys): 88 reads, 212 writes
hda3 (scratch): 102 reads, 2 writes
Console: 1267 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off..
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

DETAILS OF tests/userprog/read-zero FAILURE:

Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a218 0x80480be 0x8048142 0x804878a
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/userprog/read-zero:
0x0804a218: open (...../lib/user/syscall.c:110)
0x080480be: test_main (...s/userprog/read-zero.c:14)
0x08048142: main (...ild/../../tests/main.c:13)
0x0804878a: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.

OUTPUT FROM tests/userprog/read-zero:

Copying tests/userprog/read-zero to scratch partition...
Copying ../../tests/userprog/sample.txt to scratch partition...
squish-pty bochs -q
========================================================================
                       Bochs x86 Emulator 2.6.2
                Built from SVN snapshot on May 26, 2013
                  Compiled on Jun 26 2021 at 01:03:24
========================================================================
PiLo hda1
Loading.........
Kernel command line: -q -f extract run read-zero
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  196,000 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 103 sectors (51 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'read-zero' into the file system...
Putting 'sample.txt' into the file system...
Erasing ustar archive...
Executing 'read-zero':
(read-zero) begin
(read-zero) open "sample.txt"
Kernel PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a218 0x80480be 0x8048142 0x804878a.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 299 ticks
Thread: 0 idle ticks, 271 kernel ticks, 28 user ticks
hda2 (filesys): 88 reads, 212 writes
hda3 (scratch): 102 reads, 2 writes
Console: 1230 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off..
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

DETAILS OF tests/userprog/write-normal FAILURE:

Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a238 0x80480ee 0x8048168 0x80487aa
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/userprog/write-normal:
0x0804a238: open (...../lib/user/syscall.c:110)
0x080480ee: test_main (...serprog/write-normal.c:14)
0x08048168: main (...ild/../../tests/main.c:13)
0x080487aa: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.

OUTPUT FROM tests/userprog/write-normal:

Copying tests/userprog/write-normal to scratch partition...
Copying ../../tests/userprog/sample.txt to scratch partition...
squish-pty bochs -q
========================================================================
                       Bochs x86 Emulator 2.6.2
                Built from SVN snapshot on May 26, 2013
                  Compiled on Jun 26 2021 at 01:03:24
========================================================================
PiLo hda1
Loading.........
Kernel command line: -q -f extract run write-normal
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  196,000 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 104 sectors (52 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'write-normal' into the file system...
Putting 'sample.txt' into the file system...
Erasing ustar archive...
Executing 'write-normal':
(write-normal) begin
(write-normal) create "test.txt"
(write-normal) open "test.txt"
Kernel PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a238 0x80480ee 0x8048168 0x80487aa.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 343 ticks
Thread: 0 idle ticks, 295 kernel ticks, 48 user ticks
hda2 (filesys): 109 reads, 219 writes
hda3 (scratch): 103 reads, 2 writes
Console: 1277 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off..
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

DETAILS OF tests/userprog/write-zero FAILURE:

Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a208 0x80480be 0x8048130 0x804877a
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/userprog/write-zero:
0x0804a208: open (...../lib/user/syscall.c:110)
0x080480be: test_main (.../userprog/write-zero.c:14)
0x08048130: main (...ild/../../tests/main.c:13)
0x0804877a: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.

OUTPUT FROM tests/userprog/write-zero:

Copying tests/userprog/write-zero to scratch partition...
Copying ../../tests/userprog/sample.txt to scratch partition...
squish-pty bochs -q
========================================================================
                       Bochs x86 Emulator 2.6.2
                Built from SVN snapshot on May 26, 2013
                  Compiled on Jun 26 2021 at 01:03:24
========================================================================
PiLo hda1
Loading.........
Kernel command line: -q -f extract run write-zero
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  196,000 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 103 sectors (51 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'write-zero' into the file system...
Putting 'sample.txt' into the file system...
Erasing ustar archive...
Executing 'write-zero':
(write-zero) begin
(write-zero) open "sample.txt"
Kernel PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a208 0x80480be 0x8048130 0x804877a.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 299 ticks
Thread: 0 idle ticks, 271 kernel ticks, 28 user ticks
hda2 (filesys): 88 reads, 212 writes
hda3 (scratch): 102 reads, 2 writes
Console: 1235 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off..
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

DETAILS OF tests/userprog/close-normal FAILURE:

Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a1e8 0x80480bf 0x804811c 0x804875a
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/userprog/close-normal:
0x0804a1e8: open (...../lib/user/syscall.c:110)
0x080480bf: test_main (...serprog/close-normal.c:11)
0x0804811c: main (...ild/../../tests/main.c:13)
0x0804875a: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.

OUTPUT FROM tests/userprog/close-normal:

Copying tests/userprog/close-normal to scratch partition...
Copying ../../tests/userprog/sample.txt to scratch partition...
squish-pty bochs -q
========================================================================
                       Bochs x86 Emulator 2.6.2
                Built from SVN snapshot on May 26, 2013
                  Compiled on Jun 26 2021 at 01:03:24
========================================================================
PiLo hda1
Loading.........
Kernel command line: -q -f extract run close-normal
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  196,000 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 103 sectors (51 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'close-normal' into the file system...
Putting 'sample.txt' into the file system...
Erasing ustar archive...
Executing 'close-normal':
(close-normal) begin
(close-normal) open "sample.txt"
Kernel PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a1e8 0x80480bf 0x804811c 0x804875a.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 300 ticks
Thread: 0 idle ticks, 271 kernel ticks, 29 user ticks
hda2 (filesys): 88 reads, 212 writes
hda3 (scratch): 102 reads, 2 writes
Console: 1245 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off..
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

DETAILS OF tests/userprog/exec-once FAILURE:

Test output failed to match any acceptable form.

Acceptable output:
  (exec-once) begin
  (child-simple) run
  child-simple: exit(81)
  (exec-once) end
  exec-once: exit(0)
Differences in `diff -u' format:
  (exec-once) begin
  (child-simple) run
  child-simple: exit(81)
- (exec-once) end
- exec-once: exit(0)

OUTPUT FROM tests/userprog/exec-once:

Copying tests/userprog/exec-once to scratch partition...
Copying tests/userprog/child-simple to scratch partition...
squish-pty bochs -q
========================================================================
                       Bochs x86 Emulator 2.6.2
                Built from SVN snapshot on May 26, 2013
                  Compiled on Jun 26 2021 at 01:03:24
========================================================================
PiLo hda1
Loading.........
Kernel command line: -q -f extract run exec-once
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  196,000 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 197 sectors (98 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'exec-once' into the file system...
Putting 'child-simple' into the file system...
Erasing ustar archive...
Executing 'exec-once':
(exec-once) begin
(child-simple) run
child-simple: exit(81)
Execution of 'exec-once' complete.
Timer: 884715 ticks
Thread: 0 idle ticks, 442501 kernel ticks, 442221 user ticks
hda2 (filesys): 128 reads, 400 writes
hda3 (scratch): 196 reads, 2 writes
Console: 950 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

DETAILS OF tests/userprog/exec-multiple FAILURE:

Test output failed to match any acceptable form.

Acceptable output:
  (exec-multiple) begin
  (child-simple) run
  child-simple: exit(81)
  (child-simple) run
  child-simple: exit(81)
  (child-simple) run
  child-simple: exit(81)
  (child-simple) run
  child-simple: exit(81)
  (exec-multiple) end
  exec-multiple: exit(0)
Differences in `diff -u' format:
  (exec-multiple) begin
  (child-simple) run
  child-simple: exit(81)
- (child-simple) run
- child-simple: exit(81)
- (child-simple) run
- child-simple: exit(81)
- (child-simple) run
- child-simple: exit(81)
- (exec-multiple) end
- exec-multiple: exit(0)

OUTPUT FROM tests/userprog/exec-multiple:

Copying tests/userprog/exec-multiple to scratch partition...
Copying tests/userprog/child-simple to scratch partition...
squish-pty bochs -q
========================================================================
                       Bochs x86 Emulator 2.6.2
                Built from SVN snapshot on May 26, 2013
                  Compiled on Jun 26 2021 at 01:03:24
========================================================================
PiLo hda1
Loading.........
Kernel command line: -q -f extract run exec-multiple
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  196,000 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 197 sectors (98 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'exec-multiple' into the file system...
Putting 'child-simple' into the file system...
Erasing ustar archive...
Executing 'exec-multiple':
(exec-multiple) begin
(child-simple) run
child-simple: exit(81)
Execution of 'exec-multiple' complete.
Timer: 884716 ticks
Thread: 0 idle ticks, 442503 kernel ticks, 442221 user ticks
hda2 (filesys): 128 reads, 400 writes
hda3 (scratch): 196 reads, 2 writes
Console: 970 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

DETAILS OF tests/userprog/exec-arg FAILURE:

Test output failed to match any acceptable form.

Acceptable output:
  (exec-arg) begin
  (args) begin
  (args) argc = 2
  (args) argv[0] = 'child-args'
  (args) argv[1] = 'childarg'
  (args) argv[2] = null
  (args) end
  child-args: exit(0)
  (exec-arg) end
  exec-arg: exit(0)
Differences in `diff -u' format:
  (exec-arg) begin
  (args) begin
  (args) argc = 2
  (args) argv[0] = 'child-args'
  (args) argv[1] = 'childarg'
  (args) argv[2] = null
  (args) end
  child-args: exit(0)
- (exec-arg) end
- exec-arg: exit(0)

OUTPUT FROM tests/userprog/exec-arg:

Copying tests/userprog/exec-arg to scratch partition...
Copying tests/userprog/child-args to scratch partition...
squish-pty bochs -q
========================================================================
                       Bochs x86 Emulator 2.6.2
                Built from SVN snapshot on May 26, 2013
                  Compiled on Jun 26 2021 at 01:03:24
========================================================================
PiLo hda1
Loading.........
Kernel command line: -q -f extract run exec-arg
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  196,000 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 198 sectors (99 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'exec-arg' into the file system...
Putting 'child-args' into the file system...
Erasing ustar archive...
Executing 'exec-arg':
(exec-arg) begin
(args) begin
(args) argc = 2
(args) argv[0] = 'child-args'
(args) argv[1] = 'childarg'
(args) argv[2] = null
(args) end
child-args: exit(0)
Execution of 'exec-arg' complete.
Timer: 884733 ticks
Thread: 0 idle ticks, 442501 kernel ticks, 442240 user ticks
hda2 (filesys): 130 reads, 402 writes
hda3 (scratch): 197 reads, 2 writes
Console: 1041 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

DETAILS OF tests/userprog/wait-simple FAILURE:

Test output failed to match any acceptable form.

Acceptable output:
  (wait-simple) begin
  (child-simple) run
  child-simple: exit(81)
  (wait-simple) wait(exec()) = 81
  (wait-simple) end
  wait-simple: exit(0)
Differences in `diff -u' format:
  (wait-simple) begin
  (child-simple) run
  child-simple: exit(81)
- (wait-simple) wait(exec()) = 81
- (wait-simple) end
- wait-simple: exit(0)

OUTPUT FROM tests/userprog/wait-simple:

Copying tests/userprog/wait-simple to scratch partition...
Copying tests/userprog/child-simple to scratch partition...
squish-pty bochs -q
========================================================================
                       Bochs x86 Emulator 2.6.2
                Built from SVN snapshot on May 26, 2013
                  Compiled on Jun 26 2021 at 01:03:24
========================================================================
PiLo hda1
Loading.........
Kernel command line: -q -f extract run wait-simple
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  196,000 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 197 sectors (98 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'wait-simple' into the file system...
Putting 'child-simple' into the file system...
Erasing ustar archive...
Executing 'wait-simple':
(wait-simple) begin
(child-simple) run
child-simple: exit(81)
Execution of 'wait-simple' complete.
Timer: 884715 ticks
Thread: 0 idle ticks, 442501 kernel ticks, 442221 user ticks
hda2 (filesys): 128 reads, 400 writes
hda3 (scratch): 196 reads, 2 writes
Console: 960 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

DETAILS OF tests/userprog/wait-twice FAILURE:

Test output failed to match any acceptable form.

Acceptable output:
  (wait-twice) begin
  (child-simple) run
  child-simple: exit(81)
  (wait-twice) wait(exec()) = 81
  (wait-twice) wait(exec()) = -1
  (wait-twice) end
  wait-twice: exit(0)
Differences in `diff -u' format:
  (wait-twice) begin
  (child-simple) run
  child-simple: exit(81)
- (wait-twice) wait(exec()) = 81
- (wait-twice) wait(exec()) = -1
- (wait-twice) end
- wait-twice: exit(0)

OUTPUT FROM tests/userprog/wait-twice:

Copying tests/userprog/wait-twice to scratch partition...
Copying tests/userprog/child-simple to scratch partition...
squish-pty bochs -q
========================================================================
                       Bochs x86 Emulator 2.6.2
                Built from SVN snapshot on May 26, 2013
                  Compiled on Jun 26 2021 at 01:03:24
========================================================================
PiLo hda1
Loading.........
Kernel command line: -q -f extract run wait-twice
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  196,000 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 198 sectors (99 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'wait-twice' into the file system...
Putting 'child-simple' into the file system...
Erasing ustar archive...
Executing 'wait-twice':
(wait-twice) begin
(child-simple) run
child-simple: exit(81)
Execution of 'wait-twice' complete.
Timer: 884715 ticks
Thread: 0 idle ticks, 442501 kernel ticks, 442221 user ticks
hda2 (filesys): 128 reads, 402 writes
hda3 (scratch): 197 reads, 2 writes
Console: 955 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

DETAILS OF tests/userprog/multi-recurse FAILURE:

Run didn't shut down properly: no "Timer: # ticks" message

OUTPUT FROM tests/userprog/multi-recurse:

Copying tests/userprog/multi-recurse to scratch partition...
squish-pty bochs -q
========================================================================
                       Bochs x86 Emulator 2.6.2
                Built from SVN snapshot on May 26, 2013
                  Compiled on Jun 26 2021 at 01:03:24
========================================================================
PiLo hda1
Loading.........
Kernel command line: -q -f extract run 'multi-recurse 15'
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  196,000 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 112 sectors (56 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'multi-recurse' into the file system...
Erasing ustar archive...
Executing 'multi-recurse 15':
(multi-recurse) begin 15
(multi-recurse) exec("multi-recurse 14")
(multi-recurse) begin 14
(multi-recurse) exec("multi-recurse 13")
(multi-recurse) begin 13
(multi-recurse) exec("multi-recurse 12")
(multi-recurse) begin 12
(multi-recurse) exec("multi-recurse 11")
(multi-recurse) begin 11
(multi-recurse) exec("multi-recurse 10")
(multi-recurse) begin 10
(multi-recurse) exec("multi-recurse 9")
(multi-recurse) begin 9
(multi-recurse) exec("multi-recurse 8")
(multi-recurse) begin 8
(multi-recurse) exec("multi-recurse 7")
(multi-recurse) begin 7
(multi-recurse) exec("multi-recurse 6")
(multi-recurse) begin 6
(multi-recurse) exec("multi-recurse 5")
(multi-recurse) begin 5
(multi-recurse) exec("multi-recurse 4")
(multi-recurse) begin 4
(multi-recurse) exec("multi-recurse 3")
(multi-recurse) begin 3
(multi-recurse) exec("multi-recurse 2")
(multi-recurse) begin 2
(multi-recurse) exec("multi-recurse 1")
(multi-recurse) begin 1
(multi-recurse) exec("multi-recurse 0")
(multi-recurse) begin 0
(multi-recurse) end 0
multi-recurse: exit(0)

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

DETAILS OF tests/userprog/rox-simple FAILURE:

Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a248 0x80480bf 0x804816f 0x80487ba
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/userprog/rox-simple:
0x0804a248: open (...../lib/user/syscall.c:110)
0x080480bf: test_main (.../userprog/rox-simple.c:14)
0x0804816f: main (...ild/../../tests/main.c:13)
0x080487ba: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.

OUTPUT FROM tests/userprog/rox-simple:

Copying tests/userprog/rox-simple to scratch partition...
squish-pty bochs -q
========================================================================
                       Bochs x86 Emulator 2.6.2
                Built from SVN snapshot on May 26, 2013
                  Compiled on Jun 26 2021 at 01:03:24
========================================================================
PiLo hda1
Loading.........
Kernel command line: -q -f extract run rox-simple
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  196,000 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 101 sectors (50 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'rox-simple' into the file system...
Erasing ustar archive...
Executing 'rox-simple':
(rox-simple) begin
(rox-simple) open "rox-simple"
Kernel PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a248 0x80480bf 0x804816f 0x80487ba.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 275 ticks
Thread: 0 idle ticks, 247 kernel ticks, 28 user ticks
hda2 (filesys): 63 reads, 206 writes
hda3 (scratch): 100 reads, 2 writes
Console: 1190 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off..
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

DETAILS OF tests/userprog/rox-child FAILURE:

Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a308 0x80480c0 0x8048234 0x804887a
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/userprog/rox-child:
0x0804a308: open (...../lib/user/syscall.c:110)
0x080480c0: test_main (...userprog/rox-child.inc:16)
0x08048234: main (...ild/../../tests/main.c:13)
0x0804887a: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.

OUTPUT FROM tests/userprog/rox-child:

Copying tests/userprog/rox-child to scratch partition...
Copying tests/userprog/child-rox to scratch partition...
squish-pty bochs -q
========================================================================
                       Bochs x86 Emulator 2.6.2
                Built from SVN snapshot on May 26, 2013
                  Compiled on Jun 26 2021 at 01:03:24
========================================================================
PiLo hda1
Loading.........
Kernel command line: -q -f extract run rox-child
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  196,000 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 212 sectors (106 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'rox-child' into the file system...
Putting 'child-rox' into the file system...
Erasing ustar archive...
Executing 'rox-child':
(rox-child) begin
(rox-child) open "child-rox"
Kernel PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a308 0x80480c0 0x8048234 0x804887a.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 360 ticks
Thread: 0 idle ticks, 332 kernel ticks, 28 user ticks
hda2 (filesys): 88 reads, 430 writes
hda3 (scratch): 211 reads, 2 writes
Console: 1229 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off..
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

DETAILS OF tests/userprog/rox-multichild FAILURE:

Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a308 0x80480c0 0x8048234 0x804887a
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/userprog/rox-multichild:
0x0804a308: open (...../lib/user/syscall.c:110)
0x080480c0: test_main (...userprog/rox-child.inc:16)
0x08048234: main (...ild/../../tests/main.c:13)
0x0804887a: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.

OUTPUT FROM tests/userprog/rox-multichild:

Copying tests/userprog/rox-multichild to scratch partition...
Copying tests/userprog/child-rox to scratch partition...
squish-pty bochs -q
========================================================================
                       Bochs x86 Emulator 2.6.2
                Built from SVN snapshot on May 26, 2013
                  Compiled on Jun 26 2021 at 01:03:24
========================================================================
PiLo hda1
Loading.........
Kernel command line: -q -f extract run rox-multichild
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  196,000 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 212 sectors (106 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'rox-multichild' into the file system...
Putting 'child-rox' into the file system...
Erasing ustar archive...
Executing 'rox-multichild':
(rox-multichild) begin
(rox-multichild) open "child-rox"
Kernel PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a308 0x80480c0 0x8048234 0x804887a.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 361 ticks
Thread: 0 idle ticks, 332 kernel ticks, 29 user ticks
hda2 (filesys): 88 reads, 430 writes
hda3 (scratch): 211 reads, 2 writes
Console: 1254 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off..
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

DETAILS OF tests/userprog/close-stdin FAILURE:

Kernel panic in run: PANIC at ../../userprog/syscall.c:294 in close(): assertion `0' failed.
Call stack: 0xc002855c 0xc002b980 0xc002be7f 0xc00219f6 0xc0021b2d 0x804a229 0x80480b2 0x80480e4 0x804872a
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002b980: tell (...../userprog/syscall.c:290)
0xc002be7f: syscall_handler (...../userprog/syscall.c:170)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/userprog/close-stdin:
0x0804a229: close (...../lib/user/syscall.c:146)
0x080480b2: test_main (...userprog/close-stdin.c:11)
0x080480e4: main (...ild/../../tests/main.c:13)
0x0804872a: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.

OUTPUT FROM tests/userprog/close-stdin:

Copying tests/userprog/close-stdin to scratch partition...
squish-pty bochs -q
========================================================================
                       Bochs x86 Emulator 2.6.2
                Built from SVN snapshot on May 26, 2013
                  Compiled on Jun 26 2021 at 01:03:24
========================================================================
PiLo hda1
Loading.........
Kernel command line: -q -f extract run close-stdin
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  196,000 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 100 sectors (50 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'close-stdin' into the file system...
Erasing ustar archive...
Executing 'close-stdin':
(close-stdin) begin
Kernel PANIC at ../../userprog/syscall.c:294 in close(): assertion `0' failed.
Call stack: 0xc002855c 0xc002b980 0xc002be7f 0xc00219f6 0xc0021b2d 0x804a229 0x80480b2 0x80480e4 0x804872a.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 267 ticks
Thread: 0 idle ticks, 243 kernel ticks, 24 user ticks
hda2 (filesys): 62 reads, 204 writes
hda3 (scratch): 99 reads, 2 writes
Console: 1163 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off..
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

DETAILS OF tests/userprog/close-stdout FAILURE:

Kernel panic in run: PANIC at ../../userprog/syscall.c:294 in close(): assertion `0' failed.
Call stack: 0xc002855c 0xc002b980 0xc002be7f 0xc00219f6 0xc0021b2d 0x804a229 0x80480b2 0x80480e4 0x804872a
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002b980: tell (...../userprog/syscall.c:290)
0xc002be7f: syscall_handler (...../userprog/syscall.c:170)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/userprog/close-stdout:
0x0804a229: close (...../lib/user/syscall.c:146)
0x080480b2: test_main (...serprog/close-stdout.c:11)
0x080480e4: main (...ild/../../tests/main.c:13)
0x0804872a: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.

OUTPUT FROM tests/userprog/close-stdout:

Copying tests/userprog/close-stdout to scratch partition...
squish-pty bochs -q
========================================================================
                       Bochs x86 Emulator 2.6.2
                Built from SVN snapshot on May 26, 2013
                  Compiled on Jun 26 2021 at 01:03:24
========================================================================
PiLo hda1
Loading.........
Kernel command line: -q -f extract run close-stdout
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  196,000 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 100 sectors (50 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'close-stdout' into the file system...
Erasing ustar archive...
Executing 'close-stdout':
(close-stdout) begin
Kernel PANIC at ../../userprog/syscall.c:294 in close(): assertion `0' failed.
Call stack: 0xc002855c 0xc002b980 0xc002be7f 0xc00219f6 0xc0021b2d 0x804a229 0x80480b2 0x80480e4 0x804872a.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 267 ticks
Thread: 0 idle ticks, 243 kernel ticks, 24 user ticks
hda2 (filesys): 62 reads, 204 writes
hda3 (scratch): 99 reads, 2 writes
Console: 1167 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off..
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

DETAILS OF tests/userprog/close-bad-fd FAILURE:

Kernel panic in run: PANIC at ../../userprog/syscall.c:294 in close(): assertion `0' failed.
Call stack: 0xc002855c 0xc002b980 0xc002be7f 0xc00219f6 0xc0021b2d 0x804a229 0x80480b2 0x80480e4 0x804872a
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002b980: tell (...../userprog/syscall.c:290)
0xc002be7f: syscall_handler (...../userprog/syscall.c:170)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/userprog/close-bad-fd:
0x0804a229: close (...../lib/user/syscall.c:146)
0x080480b2: test_main (...serprog/close-bad-fd.c:11)
0x080480e4: main (...ild/../../tests/main.c:13)
0x0804872a: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.

OUTPUT FROM tests/userprog/close-bad-fd:

Copying tests/userprog/close-bad-fd to scratch partition...
squish-pty bochs -q
========================================================================
                       Bochs x86 Emulator 2.6.2
                Built from SVN snapshot on May 26, 2013
                  Compiled on Jun 26 2021 at 01:03:24
========================================================================
PiLo hda1
Loading.........
Kernel command line: -q -f extract run close-bad-fd
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  196,000 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 100 sectors (50 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'close-bad-fd' into the file system...
Erasing ustar archive...
Executing 'close-bad-fd':
(close-bad-fd) begin
Kernel PANIC at ../../userprog/syscall.c:294 in close(): assertion `0' failed.
Call stack: 0xc002855c 0xc002b980 0xc002be7f 0xc00219f6 0xc0021b2d 0x804a229 0x80480b2 0x80480e4 0x804872a.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 267 ticks
Thread: 0 idle ticks, 243 kernel ticks, 24 user ticks
hda2 (filesys): 62 reads, 204 writes
hda3 (scratch): 99 reads, 2 writes
Console: 1167 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off..
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

DETAILS OF tests/userprog/close-twice FAILURE:

Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a208 0x80480bf 0x8048130 0x804877a
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/userprog/close-twice:
0x0804a208: open (...../lib/user/syscall.c:110)
0x080480bf: test_main (...userprog/close-twice.c:13)
0x08048130: main (...ild/../../tests/main.c:13)
0x0804877a: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.

OUTPUT FROM tests/userprog/close-twice:

Copying tests/userprog/close-twice to scratch partition...
Copying ../../tests/userprog/sample.txt to scratch partition...
squish-pty bochs -q
========================================================================
                       Bochs x86 Emulator 2.6.2
                Built from SVN snapshot on May 26, 2013
                  Compiled on Jun 26 2021 at 01:03:24
========================================================================
PiLo hda1
Loading.........
Kernel command line: -q -f extract run close-twice
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  196,000 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 103 sectors (51 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'close-twice' into the file system...
Putting 'sample.txt' into the file system...
Erasing ustar archive...
Executing 'close-twice':
(close-twice) begin
(close-twice) open "sample.txt"
Kernel PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a208 0x80480bf 0x8048130 0x804877a.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 300 ticks
Thread: 0 idle ticks, 271 kernel ticks, 29 user ticks
hda2 (filesys): 88 reads, 212 writes
hda3 (scratch): 102 reads, 2 writes
Console: 1240 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off..
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

DETAILS OF tests/userprog/read-bad-fd FAILURE:

Kernel panic in run: PANIC at ../../userprog/syscall.c:284 in read(): assertion `0' failed.
Call stack: 0xc002855c 0xc002bc2e 0xc002be26 0xc00219f6 0xc0021b2d 0x804a27f 0x80480c2 0x8048188 0x80487ca
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002bc2e: halt (...../userprog/syscall.c:207)
0xc002be26: syscall_handler (...../userprog/syscall.c:152)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/userprog/read-bad-fd:
0x0804a27f: read (...../lib/user/syscall.c:122)
0x080480c2: test_main (...userprog/read-bad-fd.c:15)
0x08048188: main (...ild/../../tests/main.c:13)
0x080487ca: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.

OUTPUT FROM tests/userprog/read-bad-fd:

Copying tests/userprog/read-bad-fd to scratch partition...
squish-pty bochs -q
========================================================================
                       Bochs x86 Emulator 2.6.2
                Built from SVN snapshot on May 26, 2013
                  Compiled on Jun 26 2021 at 01:03:24
========================================================================
PiLo hda1
Loading.........
Kernel command line: -q -f extract run read-bad-fd
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  196,000 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 101 sectors (50 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'read-bad-fd' into the file system...
Erasing ustar archive...
Executing 'read-bad-fd':
(read-bad-fd) begin
Kernel PANIC at ../../userprog/syscall.c:284 in read(): assertion `0' failed.
Call stack: 0xc002855c 0xc002bc2e 0xc002be26 0xc00219f6 0xc0021b2d 0x804a27f 0x80480c2 0x8048188 0x80487ca.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 267 ticks
Thread: 0 idle ticks, 243 kernel ticks, 24 user ticks
hda2 (filesys): 63 reads, 206 writes
hda3 (scratch): 100 reads, 2 writes
Console: 1163 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off..
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

DETAILS OF tests/userprog/multi-child-fd FAILURE:

Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a248 0x80480c3 0x8048172 0x80487ba
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/userprog/multi-child-fd:
0x0804a248: open (...../lib/user/syscall.c:110)
0x080480c3: test_main (...rprog/multi-child-fd.c:18)
0x08048172: main (...ild/../../tests/main.c:13)
0x080487ba: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.

OUTPUT FROM tests/userprog/multi-child-fd:

Copying tests/userprog/multi-child-fd to scratch partition...
Copying ../../tests/userprog/sample.txt to scratch partition...
Copying tests/userprog/child-close to scratch partition...
squish-pty bochs -q
========================================================================
                       Bochs x86 Emulator 2.6.2
                Built from SVN snapshot on May 26, 2013
                  Compiled on Jun 26 2021 at 01:03:24
========================================================================
PiLo hda1
Loading.........
Kernel command line: -q -f extract run multi-child-fd
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  196,000 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 213 sectors (106 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'multi-child-fd' into the file system...
Putting 'sample.txt' into the file system...
Putting 'child-close' into the file system...
Erasing ustar archive...
Executing 'multi-child-fd':
(multi-child-fd) begin
(multi-child-fd) open "sample.txt"
Kernel PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a248 0x80480c3 0x8048172 0x80487ba.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 385 ticks
Thread: 0 idle ticks, 356 kernel ticks, 29 user ticks
hda2 (filesys): 115 reads, 434 writes
hda3 (scratch): 212 reads, 2 writes
Console: 1303 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off..
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

DETAILS OF tests/userprog/open-bad-ptr FAILURE:

Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a1d8 0x80480b2 0x80480fe 0x804874a
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/userprog/open-bad-ptr:
0x0804a1d8: open (...../lib/user/syscall.c:110)
0x080480b2: test_main (...serprog/open-bad-ptr.c:11)
0x080480fe: main (...ild/../../tests/main.c:13)
0x0804874a: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.

OUTPUT FROM tests/userprog/open-bad-ptr:

Copying tests/userprog/open-bad-ptr to scratch partition...
squish-pty bochs -q
========================================================================
                       Bochs x86 Emulator 2.6.2
                Built from SVN snapshot on May 26, 2013
                  Compiled on Jun 26 2021 at 01:03:24
========================================================================
PiLo hda1
Loading.........
Kernel command line: -q -f extract run open-bad-ptr
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  196,000 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 100 sectors (50 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'open-bad-ptr' into the file system...
Erasing ustar archive...
Executing 'open-bad-ptr':
(open-bad-ptr) begin
Kernel PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a1d8 0x80480b2 0x80480fe 0x804874a.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 267 ticks
Thread: 0 idle ticks, 243 kernel ticks, 24 user ticks
hda2 (filesys): 63 reads, 204 writes
hda3 (scratch): 99 reads, 2 writes
Console: 1166 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off..
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

DETAILS OF tests/userprog/read-bad-ptr FAILURE:

Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a1f8 0x80480be 0x8048123 0x804876a
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/userprog/read-bad-ptr:
0x0804a1f8: open (...../lib/user/syscall.c:110)
0x080480be: test_main (...serprog/read-bad-ptr.c:12)
0x08048123: main (...ild/../../tests/main.c:13)
0x0804876a: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.

OUTPUT FROM tests/userprog/read-bad-ptr:

Copying tests/userprog/read-bad-ptr to scratch partition...
Copying ../../tests/userprog/sample.txt to scratch partition...
squish-pty bochs -q
========================================================================
                       Bochs x86 Emulator 2.6.2
                Built from SVN snapshot on May 26, 2013
                  Compiled on Jun 26 2021 at 01:03:24
========================================================================
PiLo hda1
Loading.........
Kernel command line: -q -f extract run read-bad-ptr
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  196,000 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 103 sectors (51 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'read-bad-ptr' into the file system...
Putting 'sample.txt' into the file system...
Erasing ustar archive...
Executing 'read-bad-ptr':
(read-bad-ptr) begin
(read-bad-ptr) open "sample.txt"
Kernel PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a1f8 0x80480be 0x8048123 0x804876a.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 300 ticks
Thread: 0 idle ticks, 271 kernel ticks, 29 user ticks
hda2 (filesys): 88 reads, 212 writes
hda3 (scratch): 102 reads, 2 writes
Console: 1245 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off..
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

DETAILS OF tests/userprog/write-bad-ptr FAILURE:

Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a1f8 0x80480be 0x8048123 0x804876a
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/userprog/write-bad-ptr:
0x0804a1f8: open (...../lib/user/syscall.c:110)
0x080480be: test_main (...erprog/write-bad-ptr.c:12)
0x08048123: main (...ild/../../tests/main.c:13)
0x0804876a: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.

OUTPUT FROM tests/userprog/write-bad-ptr:

Copying tests/userprog/write-bad-ptr to scratch partition...
Copying ../../tests/userprog/sample.txt to scratch partition...
squish-pty bochs -q
========================================================================
                       Bochs x86 Emulator 2.6.2
                Built from SVN snapshot on May 26, 2013
                  Compiled on Jun 26 2021 at 01:03:24
========================================================================
PiLo hda1
Loading.........
Kernel command line: -q -f extract run write-bad-ptr
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  196,000 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 103 sectors (51 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'write-bad-ptr' into the file system...
Putting 'sample.txt' into the file system...
Erasing ustar archive...
Executing 'write-bad-ptr':
(write-bad-ptr) begin
(write-bad-ptr) open "sample.txt"
Kernel PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a1f8 0x80480be 0x8048123 0x804876a.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 300 ticks
Thread: 0 idle ticks, 271 kernel ticks, 29 user ticks
hda2 (filesys): 88 reads, 212 writes
hda3 (scratch): 102 reads, 2 writes
Console: 1250 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off..
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

DETAILS OF tests/userprog/open-boundary FAILURE:

Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a278 0x80480c6 0x80481a1 0x80487ea
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/userprog/open-boundary:
0x0804a278: open (...../lib/user/syscall.c:110)
0x080480c6: test_main (...erprog/open-boundary.c:12)
0x080481a1: main (...ild/../../tests/main.c:13)
0x080487ea: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.

OUTPUT FROM tests/userprog/open-boundary:

Copying tests/userprog/open-boundary to scratch partition...
Copying ../../tests/userprog/sample.txt to scratch partition...
squish-pty bochs -q
========================================================================
                       Bochs x86 Emulator 2.6.2
                Built from SVN snapshot on May 26, 2013
                  Compiled on Jun 26 2021 at 01:03:24
========================================================================
PiLo hda1
Loading.........
Kernel command line: -q -f extract run open-boundary
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  196,000 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 105 sectors (52 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'open-boundary' into the file system...
Putting 'sample.txt' into the file system...
Erasing ustar archive...
Executing 'open-boundary':
(open-boundary) begin
(open-boundary) open "sample.txt"
Kernel PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a278 0x80480c6 0x80481a1 0x80487ea.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 312 ticks
Thread: 0 idle ticks, 279 kernel ticks, 33 user ticks
hda2 (filesys): 88 reads, 216 writes
hda3 (scratch): 104 reads, 2 writes
Console: 1250 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off..
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

DETAILS OF tests/userprog/read-boundary FAILURE:

Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a2f8 0x80480c0 0x8048221 0x804886a
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/userprog/read-boundary:
0x0804a2f8: open (...../lib/user/syscall.c:110)
0x080480c0: test_main (...erprog/read-boundary.c:18)
0x08048221: main (...ild/../../tests/main.c:13)
0x0804886a: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.

OUTPUT FROM tests/userprog/read-boundary:

Copying tests/userprog/read-boundary to scratch partition...
Copying ../../tests/userprog/sample.txt to scratch partition...
squish-pty bochs -q
========================================================================
                       Bochs x86 Emulator 2.6.2
                Built from SVN snapshot on May 26, 2013
                  Compiled on Jun 26 2021 at 01:03:24
========================================================================
PiLo hda1
Loading.........
Kernel command line: -q -f extract run read-boundary
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  196,000 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 107 sectors (53 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'read-boundary' into the file system...
Putting 'sample.txt' into the file system...
Erasing ustar archive...
Executing 'read-boundary':
(read-boundary) begin
(read-boundary) open "sample.txt"
Kernel PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a2f8 0x80480c0 0x8048221 0x804886a.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 312 ticks
Thread: 0 idle ticks, 279 kernel ticks, 33 user ticks
hda2 (filesys): 89 reads, 220 writes
hda3 (scratch): 106 reads, 2 writes
Console: 1250 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off..
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

DETAILS OF tests/userprog/write-boundary FAILURE:

Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a2b8 0x80480cd 0x80481df 0x804882a
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/userprog/write-boundary:
0x0804a2b8: open (...../lib/user/syscall.c:110)
0x080480cd: test_main (...rprog/write-boundary.c:20)
0x080481df: main (...ild/../../tests/main.c:13)
0x0804882a: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.

OUTPUT FROM tests/userprog/write-boundary:

Copying tests/userprog/write-boundary to scratch partition...
Copying ../../tests/userprog/sample.txt to scratch partition...
squish-pty bochs -q
========================================================================
                       Bochs x86 Emulator 2.6.2
                Built from SVN snapshot on May 26, 2013
                  Compiled on Jun 26 2021 at 01:03:24
========================================================================
PiLo hda1
Loading.........
Kernel command line: -q -f extract run write-boundary
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  196,000 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 106 sectors (53 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'write-boundary' into the file system...
Putting 'sample.txt' into the file system...
Erasing ustar archive...
Executing 'write-boundary':
(write-boundary) begin
(write-boundary) open "sample.txt"
Kernel PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a2b8 0x80480cd 0x80481df 0x804882a.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 312 ticks
Thread: 0 idle ticks, 279 kernel ticks, 33 user ticks
hda2 (filesys): 89 reads, 218 writes
hda3 (scratch): 105 reads, 2 writes
Console: 1255 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off..
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

DETAILS OF tests/userprog/open-null FAILURE:

Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a1b8 0x80480b2 0x80480e4 0x804872a
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/userprog/open-null:
0x0804a1b8: open (...../lib/user/syscall.c:110)
0x080480b2: test_main (...s/userprog/open-null.c:12)
0x080480e4: main (...ild/../../tests/main.c:13)
0x0804872a: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.

OUTPUT FROM tests/userprog/open-null:

Copying tests/userprog/open-null to scratch partition...
squish-pty bochs -q
========================================================================
                       Bochs x86 Emulator 2.6.2
                Built from SVN snapshot on May 26, 2013
                  Compiled on Jun 26 2021 at 01:03:24
========================================================================
PiLo hda1
Loading.........
Kernel command line: -q -f extract run open-null
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  196,000 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 100 sectors (50 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'open-null' into the file system...
Erasing ustar archive...
Executing 'open-null':
(open-null) begin
Kernel PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a1b8 0x80480b2 0x80480e4 0x804872a.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 267 ticks
Thread: 0 idle ticks, 243 kernel ticks, 24 user ticks
hda2 (filesys): 62 reads, 204 writes
hda3 (scratch): 99 reads, 2 writes
Console: 1154 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off..
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

DETAILS OF tests/userprog/open-empty FAILURE:

Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a1c8 0x80480b2 0x80480f9 0x804873a
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/userprog/open-empty:
0x0804a1c8: open (...../lib/user/syscall.c:110)
0x080480b2: test_main (.../userprog/open-empty.c:11)
0x080480f9: main (...ild/../../tests/main.c:13)
0x0804873a: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.

OUTPUT FROM tests/userprog/open-empty:

Copying tests/userprog/open-empty to scratch partition...
squish-pty bochs -q
========================================================================
                       Bochs x86 Emulator 2.6.2
                Built from SVN snapshot on May 26, 2013
                  Compiled on Jun 26 2021 at 01:03:24
========================================================================
PiLo hda1
Loading.........
Kernel command line: -q -f extract run open-empty
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  196,000 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 100 sectors (50 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'open-empty' into the file system...
Erasing ustar archive...
Executing 'open-empty':
(open-empty) begin
Kernel PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a1c8 0x80480b2 0x80480f9 0x804873a.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 267 ticks
Thread: 0 idle ticks, 243 kernel ticks, 24 user ticks
hda2 (filesys): 63 reads, 204 writes
hda3 (scratch): 99 reads, 2 writes
Console: 1158 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off..
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

DETAILS OF tests/userprog/wait-bad-pid FAILURE:

Test output failed to match any acceptable form.

Acceptable output:
  (wait-bad-pid) begin
  (wait-bad-pid) end
  wait-bad-pid: exit(0)
Differences in `diff -u' format:
  (wait-bad-pid) begin
- (wait-bad-pid) end
- wait-bad-pid: exit(0)
Acceptable output:
  (wait-bad-pid) begin
  wait-bad-pid: exit(-1)
Differences in `diff -u' format:
  (wait-bad-pid) begin
- wait-bad-pid: exit(-1)

OUTPUT FROM tests/userprog/wait-bad-pid:

Copying tests/userprog/wait-bad-pid to scratch partition...
squish-pty bochs -q
========================================================================
                       Bochs x86 Emulator 2.6.2
                Built from SVN snapshot on May 26, 2013
                  Compiled on Jun 26 2021 at 01:03:24
========================================================================
PiLo hda1
Loading.........
Kernel command line: -q -f extract run wait-bad-pid
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  196,000 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 100 sectors (50 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'wait-bad-pid' into the file system...
Erasing ustar archive...
Executing 'wait-bad-pid':
(wait-bad-pid) begin
Execution of 'wait-bad-pid' complete.
Timer: 884593 ticks
Thread: 0 idle ticks, 442408 kernel ticks, 442192 user ticks
hda2 (filesys): 62 reads, 204 writes
hda3 (scratch): 99 reads, 2 writes
Console: 874 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

DETAILS OF tests/userprog/wait-killed FAILURE:

Test output failed to match any acceptable form.

Acceptable output:
  (wait-killed) begin
  (child-bad) begin
  child-bad: exit(-1)
  (wait-killed) wait(exec()) = -1
  (wait-killed) end
  wait-killed: exit(0)
Differences in `diff -u' format:
  (wait-killed) begin
  (child-bad) begin
  child-bad: exit(-1)
- (wait-killed) wait(exec()) = -1
- (wait-killed) end
- wait-killed: exit(0)

OUTPUT FROM tests/userprog/wait-killed:

Copying tests/userprog/wait-killed to scratch partition...
Copying tests/userprog/child-bad to scratch partition...
squish-pty bochs -q
========================================================================
                       Bochs x86 Emulator 2.6.2
                Built from SVN snapshot on May 26, 2013
                  Compiled on Jun 26 2021 at 01:03:24
========================================================================
PiLo hda1
Loading.........
Kernel command line: -q -f extract run wait-killed
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  196,000 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 198 sectors (99 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'wait-killed' into the file system...
Putting 'child-bad' into the file system...
Erasing ustar archive...
Executing 'wait-killed':
(wait-killed) begin
(child-bad) begin
child-bad: exit(-1)
Execution of 'wait-killed' complete.
Timer: 884714 ticks
Thread: 0 idle ticks, 442501 kernel ticks, 442220 user ticks
hda2 (filesys): 130 reads, 402 writes
hda3 (scratch): 197 reads, 2 writes
Console: 953 characters output
Keyboard: 0 keys pressed
Exception: 1 page faults
Powering off...

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

DETAILS OF tests/userprog/no-vm/multi-oom FAILURE:

Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a818 0x80480b9 0x80480da 0x804823b 0x80489aa
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/userprog/no-vm/multi-oom:
0x0804a818: open (...../lib/user/syscall.c:110)
0x080480b9: consume_some_resources (...prog/no-vm/multi-oom.c:57)
0x080480da: consume_some_resources_and_die (...prog/no-vm/multi-oom.c:67)
0x0804823b: main (...rog/no-vm/multi-oom.c:119)
0x080489aa: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.

OUTPUT FROM tests/userprog/no-vm/multi-oom:

Copying tests/userprog/no-vm/multi-oom to scratch partition...
squish-pty bochs -q
========================================================================
                       Bochs x86 Emulator 2.6.2
                Built from SVN snapshot on May 26, 2013
                  Compiled on Jun 26 2021 at 01:03:24
========================================================================
PiLo hda1
Loading.........
Kernel command line: -q -f extract run multi-oom
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  196,000 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 116 sectors (58 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'multi-oom' into the file system...
Erasing ustar archive...
Executing 'multi-oom':
(multi-oom) begin
Kernel PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a818 0x80480b9 0x80480da 0x804823b 0x80489aa.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 6026 ticks
Thread: 0 idle ticks, 775 kernel ticks, 5251 user ticks
hda2 (filesys): 707 reads, 236 writes
hda3 (scratch): 115 reads, 2 writes
Console: 1169 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off..
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

DETAILS OF tests/filesys/base/sm-create FAILURE:

Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a348 0x80485bb 0x8048102 0x8048893 0x80488be
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/filesys/base/sm-create:
0x0804a348: open (...../lib/user/syscall.c:110)
0x080485bb: check_file (...ild/../../tests/lib.c:155)
0x08048102: test_main (...sts/filesys/create.inc:15)
0x08048893: main (...ild/../../tests/main.c:13)
0x080488be: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.

OUTPUT FROM tests/filesys/base/sm-create:

Copying tests/filesys/base/sm-create to scratch partition...
squish-pty bochs -q
========================================================================
                       Bochs x86 Emulator 2.6.2
                Built from SVN snapshot on May 26, 2013
                  Compiled on Jun 26 2021 at 01:03:24
========================================================================
PiLo hda1
Loading.........
Kernel command line: -q -f extract run sm-create
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  196,000 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 104 sectors (52 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'sm-create' into the file system...
Erasing ustar archive...
Executing 'sm-create':
(sm-create) begin
(sm-create) create "blargle"
(sm-create) open "blargle" for verification
Kernel PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a348 0x80485bb 0x8048102 0x8048893 0x80488be.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 327 ticks
Thread: 0 idle ticks, 275 kernel ticks, 52 user ticks
hda2 (filesys): 84 reads, 228 writes
hda3 (scratch): 103 reads, 2 writes
Console: 1238 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off..
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

DETAILS OF tests/filesys/base/sm-full FAILURE:

Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a328 0x8048777 0x80480e4 0x8048873 0x804889e
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/filesys/base/sm-full:
0x0804a328: open (...../lib/user/syscall.c:110)
0x08048777: seq_test (...sts/filesys/seq-test.c:16)
0x080480e4: test_main (.../filesys/base/full.inc:20)
0x08048873: main (...ild/../../tests/main.c:13)
0x0804889e: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.

OUTPUT FROM tests/filesys/base/sm-full:

Copying tests/filesys/base/sm-full to scratch partition...
squish-pty bochs -q
========================================================================
                       Bochs x86 Emulator 2.6.2
                Built from SVN snapshot on May 26, 2013
                  Compiled on Jun 26 2021 at 01:03:24
========================================================================
PiLo hda1
Loading.........
Kernel command line: -q -f extract run sm-full
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  196,000 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 104 sectors (52 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'sm-full' into the file system...
Erasing ustar archive...
Executing 'sm-full':
(sm-full) begin
(sm-full) create "quux"
(sm-full) open "quux"
Kernel PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a328 0x8048777 0x80480e4 0x8048873 0x804889e.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 346 ticks
Thread: 0 idle ticks, 283 kernel ticks, 63 user ticks
hda2 (filesys): 83 reads, 228 writes
hda3 (scratch): 103 reads, 2 writes
Console: 1203 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off..
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

DETAILS OF tests/filesys/base/sm-random FAILURE:

Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a4f8 0x804813e 0x8048a43 0x8048a6e
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/filesys/base/sm-random:
0x0804a4f8: open (...../lib/user/syscall.c:110)
0x0804813e: test_main (...ilesys/base/random.inc:33)
0x08048a43: main (...ild/../../tests/main.c:13)
0x08048a6e: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.

OUTPUT FROM tests/filesys/base/sm-random:

Copying tests/filesys/base/sm-random to scratch partition...
squish-pty bochs -q
========================================================================
                       Bochs x86 Emulator 2.6.2
                Built from SVN snapshot on May 26, 2013
                  Compiled on Jun 26 2021 at 01:03:24
========================================================================
PiLo hda1
Loading.........
Kernel command line: -q -f extract run sm-random
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  196,000 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 106 sectors (53 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'sm-random' into the file system...
Erasing ustar archive...
Executing 'sm-random':
(sm-random) begin
(sm-random) create "bazzle"
(sm-random) open "bazzle"
Kernel PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a4f8 0x804813e 0x8048a43 0x8048a6e.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 322 ticks
Thread: 0 idle ticks, 271 kernel ticks, 51 user ticks
hda2 (filesys): 79 reads, 224 writes
hda3 (scratch): 105 reads, 2 writes
Console: 1209 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off..
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

DETAILS OF tests/filesys/base/sm-seq-block FAILURE:

Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a328 0x8048777 0x80480e4 0x8048873 0x804889e
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/filesys/base/sm-seq-block:
0x0804a328: open (...../lib/user/syscall.c:110)
0x08048777: seq_test (...sts/filesys/seq-test.c:16)
0x080480e4: test_main (...sys/base/seq-block.inc:20)
0x08048873: main (...ild/../../tests/main.c:13)
0x0804889e: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.

OUTPUT FROM tests/filesys/base/sm-seq-block:

Copying tests/filesys/base/sm-seq-block to scratch partition...
squish-pty bochs -q
========================================================================
                       Bochs x86 Emulator 2.6.2
                Built from SVN snapshot on May 26, 2013
                  Compiled on Jun 26 2021 at 01:03:24
========================================================================
PiLo hda1
Loading.........
Kernel command line: -q -f extract run sm-seq-block
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  196,000 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 104 sectors (52 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'sm-seq-block' into the file system...
Erasing ustar archive...
Executing 'sm-seq-block':
(sm-seq-block) begin
(sm-seq-block) create "noodle"
(sm-seq-block) open "noodle"
Kernel PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a328 0x8048777 0x80480e4 0x8048873 0x804889e.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 352 ticks
Thread: 0 idle ticks, 287 kernel ticks, 65 user ticks
hda2 (filesys): 83 reads, 228 writes
hda3 (scratch): 103 reads, 2 writes
Console: 1237 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off..
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

DETAILS OF tests/filesys/base/sm-seq-random FAILURE:

Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a348 0x8048797 0x80480e6 0x8048893 0x80488be
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/filesys/base/sm-seq-random:
0x0804a348: open (...../lib/user/syscall.c:110)
0x08048797: seq_test (...sts/filesys/seq-test.c:16)
0x080480e6: test_main (...ys/base/seq-random.inc:22)
0x08048893: main (...ild/../../tests/main.c:13)
0x080488be: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.

OUTPUT FROM tests/filesys/base/sm-seq-random:

Copying tests/filesys/base/sm-seq-random to scratch partition...
squish-pty bochs -q
========================================================================
                       Bochs x86 Emulator 2.6.2
                Built from SVN snapshot on May 26, 2013
                  Compiled on Jun 26 2021 at 01:03:24
========================================================================
PiLo hda1
Loading.........
Kernel command line: -q -f extract run sm-seq-random
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  196,000 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 104 sectors (52 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'sm-seq-random' into the file system...
Erasing ustar archive...
Executing 'sm-seq-random':
(sm-seq-random) begin
(sm-seq-random) create "nibble"
(sm-seq-random) open "nibble"
Kernel PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a348 0x8048797 0x80480e6 0x8048893 0x80488be.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 353 ticks
Thread: 0 idle ticks, 287 kernel ticks, 66 user ticks
hda2 (filesys): 84 reads, 228 writes
hda3 (scratch): 103 reads, 2 writes
Console: 1243 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off..
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

DETAILS OF tests/filesys/base/lg-create FAILURE:

Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a348 0x80485bb 0x8048102 0x8048893 0x80488be
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/filesys/base/lg-create:
0x0804a348: open (...../lib/user/syscall.c:110)
0x080485bb: check_file (...ild/../../tests/lib.c:155)
0x08048102: test_main (...sts/filesys/create.inc:15)
0x08048893: main (...ild/../../tests/main.c:13)
0x080488be: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.

OUTPUT FROM tests/filesys/base/lg-create:

Copying tests/filesys/base/lg-create to scratch partition...
squish-pty bochs -q
========================================================================
                       Bochs x86 Emulator 2.6.2
                Built from SVN snapshot on May 26, 2013
                  Compiled on Jun 26 2021 at 01:03:24
========================================================================
PiLo hda1
Loading.........
Kernel command line: -q -f extract run lg-create
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  196,000 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 104 sectors (52 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'lg-create' into the file system...
Erasing ustar archive...
Executing 'lg-create':
(lg-create) begin
(lg-create) create "blargle"
(lg-create) open "blargle" for verification
Kernel PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a348 0x80485bb 0x8048102 0x8048893 0x80488be.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 440 ticks
Thread: 0 idle ticks, 331 kernel ticks, 109 user ticks
hda2 (filesys): 84 reads, 364 writes
hda3 (scratch): 103 reads, 2 writes
Console: 1239 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off..
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

DETAILS OF tests/filesys/base/lg-full FAILURE:

Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a328 0x8048777 0x80480e4 0x8048873 0x804889e
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/filesys/base/lg-full:
0x0804a328: open (...../lib/user/syscall.c:110)
0x08048777: seq_test (...sts/filesys/seq-test.c:16)
0x080480e4: test_main (.../filesys/base/full.inc:20)
0x08048873: main (...ild/../../tests/main.c:13)
0x0804889e: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.

OUTPUT FROM tests/filesys/base/lg-full:

Copying tests/filesys/base/lg-full to scratch partition...
squish-pty bochs -q
========================================================================
                       Bochs x86 Emulator 2.6.2
                Built from SVN snapshot on May 26, 2013
                  Compiled on Jun 26 2021 at 01:03:24
========================================================================
PiLo hda1
Loading.........
Kernel command line: -q -f extract run lg-full
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  196,000 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 104 sectors (52 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'lg-full' into the file system...
Erasing ustar archive...
Executing 'lg-full':
(lg-full) begin
(lg-full) create "quux"
(lg-full) open "quux"
Kernel PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a328 0x8048777 0x80480e4 0x8048873 0x804889e.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 808 ticks
Thread: 0 idle ticks, 515 kernel ticks, 293 user ticks
hda2 (filesys): 83 reads, 364 writes
hda3 (scratch): 103 reads, 2 writes
Console: 1204 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off..
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

DETAILS OF tests/filesys/base/lg-random FAILURE:

Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a528 0x8048143 0x8048a73 0x8048a9e
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/filesys/base/lg-random:
0x0804a528: open (...../lib/user/syscall.c:110)
0x08048143: test_main (...ilesys/base/random.inc:33)
0x08048a73: main (...ild/../../tests/main.c:13)
0x08048a9e: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.

OUTPUT FROM tests/filesys/base/lg-random:

Copying tests/filesys/base/lg-random to scratch partition...
squish-pty bochs -q
========================================================================
                       Bochs x86 Emulator 2.6.2
                Built from SVN snapshot on May 26, 2013
                  Compiled on Jun 26 2021 at 01:03:24
========================================================================
PiLo hda1
Loading.........
Kernel command line: -q -f extract run lg-random
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  196,000 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 106 sectors (53 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'lg-random' into the file system...
Erasing ustar archive...
Executing 'lg-random':
(lg-random) begin
(lg-random) create "bazzle"
(lg-random) open "bazzle"
Kernel PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a528 0x8048143 0x8048a73 0x8048a9e.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 823 ticks
Thread: 0 idle ticks, 523 kernel ticks, 300 user ticks
hda2 (filesys): 79 reads, 370 writes
hda3 (scratch): 105 reads, 2 writes
Console: 1210 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off..
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

DETAILS OF tests/filesys/base/lg-seq-block FAILURE:

Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a328 0x8048777 0x80480e4 0x8048873 0x804889e
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/filesys/base/lg-seq-block:
0x0804a328: open (...../lib/user/syscall.c:110)
0x08048777: seq_test (...sts/filesys/seq-test.c:16)
0x080480e4: test_main (...sys/base/seq-block.inc:20)
0x08048873: main (...ild/../../tests/main.c:13)
0x0804889e: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.

OUTPUT FROM tests/filesys/base/lg-seq-block:

Copying tests/filesys/base/lg-seq-block to scratch partition...
squish-pty bochs -q
========================================================================
                       Bochs x86 Emulator 2.6.2
                Built from SVN snapshot on May 26, 2013
                  Compiled on Jun 26 2021 at 01:03:24
========================================================================
PiLo hda1
Loading.........
Kernel command line: -q -f extract run lg-seq-block
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  196,000 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 104 sectors (52 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'lg-seq-block' into the file system...
Erasing ustar archive...
Executing 'lg-seq-block':
(lg-seq-block) begin
(lg-seq-block) create "noodle"
(lg-seq-block) open "noodle"
Kernel PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a328 0x8048777 0x80480e4 0x8048873 0x804889e.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 810 ticks
Thread: 0 idle ticks, 515 kernel ticks, 295 user ticks
hda2 (filesys): 83 reads, 364 writes
hda3 (scratch): 103 reads, 2 writes
Console: 1238 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off..
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

DETAILS OF tests/filesys/base/lg-seq-random FAILURE:

Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a348 0x8048797 0x80480e6 0x8048893 0x80488be
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/filesys/base/lg-seq-random:
0x0804a348: open (...../lib/user/syscall.c:110)
0x08048797: seq_test (...sts/filesys/seq-test.c:16)
0x080480e6: test_main (...ys/base/seq-random.inc:22)
0x08048893: main (...ild/../../tests/main.c:13)
0x080488be: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.

OUTPUT FROM tests/filesys/base/lg-seq-random:

Copying tests/filesys/base/lg-seq-random to scratch partition...
squish-pty bochs -q
========================================================================
                       Bochs x86 Emulator 2.6.2
                Built from SVN snapshot on May 26, 2013
                  Compiled on Jun 26 2021 at 01:03:24
========================================================================
PiLo hda1
Loading.........
Kernel command line: -q -f extract run lg-seq-random
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  196,000 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 104 sectors (52 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'lg-seq-random' into the file system...
Erasing ustar archive...
Executing 'lg-seq-random':
(lg-seq-random) begin
(lg-seq-random) create "nibble"
(lg-seq-random) open "nibble"
Kernel PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a348 0x8048797 0x80480e6 0x8048893 0x80488be.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 815 ticks
Thread: 0 idle ticks, 519 kernel ticks, 296 user ticks
hda2 (filesys): 84 reads, 364 writes
hda3 (scratch): 103 reads, 2 writes
Console: 1244 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off..
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

DETAILS OF tests/filesys/base/syn-read FAILURE:

Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a408 0x8048107 0x8048953 0x804897e
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/filesys/base/syn-read:
0x0804a408: open (...../lib/user/syscall.c:110)
0x08048107: test_main (...ilesys/base/syn-read.c:23)
0x08048953: main (...ild/../../tests/main.c:13)
0x0804897e: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.

OUTPUT FROM tests/filesys/base/syn-read:

Copying tests/filesys/base/syn-read to scratch partition...
Copying tests/filesys/base/child-syn-read to scratch partition...
squish-pty bochs -q
========================================================================
                       Bochs x86 Emulator 2.6.2
                Built from SVN snapshot on May 26, 2013
                  Compiled on Jun 26 2021 at 01:03:24
========================================================================
PiLo hda1
Loading.........
Kernel command line: -q -f extract run syn-read
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  196,000 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 218 sectors (109 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-read' into the file system...
Putting 'child-syn-read' into the file system...
Erasing ustar archive...
Executing 'syn-read':
(syn-read) begin
(syn-read) create "data"
(syn-read) open "data"
Kernel PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a408 0x8048107 0x8048953 0x804897e.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 399 ticks
Thread: 0 idle ticks, 352 kernel ticks, 47 user ticks
hda2 (filesys): 111 reads, 448 writes
hda3 (scratch): 217 reads, 2 writes
Console: 1250 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off..
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

DETAILS OF tests/filesys/base/syn-write FAILURE:

Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a7a8 0x804812b 0x804893b
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
0x0804a7a8: (unknown)
In tests/filesys/base/syn-write:
0x0804812b: test_main (...lesys/base/syn-write.c:27)
0x0804893b: main (...uild/../../tests/main.c:7)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.

OUTPUT FROM tests/filesys/base/syn-write:

Copying tests/filesys/base/syn-write to scratch partition...
Copying tests/filesys/base/child-syn-wrt to scratch partition...
squish-pty bochs -q
========================================================================
                       Bochs x86 Emulator 2.6.2
                Built from SVN snapshot on May 26, 2013
                  Compiled on Jun 26 2021 at 01:03:24
========================================================================
PiLo hda1
Loading.........
Kernel command line: -q -f extract run syn-write
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  196,000 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 218 sectors (109 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-write' into the file system...
Putting 'child-syn-wrt' into the file system...
Erasing ustar archive...
Executing 'syn-write':
(syn-write) begin
(syn-write) create "stuff"
(syn-write) exec child 1 of 10: "child-syn-wrt 0"
(syn-write) exec child 2 of 10: "child-syn-wrt 1"
(syn-write) exec child 3 of 10: "child-syn-wrt 2"
(syn-write) exec child 4 of 10: "child-syn-wrt 3"
Kernel PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a7a8 0x804812b 0x804893b.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 559 ticks
Thread: 0 idle ticks, 408 kernel ticks, 151 user ticks
hda2 (filesys): 198 reads, 456 writes
hda3 (scratch): 217 reads, 2 writes
Console: 1423 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off..
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

DETAILS OF tests/filesys/base/syn-remove FAILURE:

Kernel panic in run: PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a4a8 0x8048107 0x80489f3 0x8048a1e
Translation of call stack:
In kernel.o:
0xc002855c: debug_panic (.../../lib/kernel/debug.c:38)
0xc002ba48: remove (...../userprog/syscall.c:260)
0xc002bdf9: syscall_handler (...../userprog/syscall.c:144)
0xc00219f6: intr_handler (..../threads/interrupt.c:367)
0xc0021b2d: intr_entry (threads/intr-stubs.S:38)
In tests/filesys/base/syn-remove:
0x0804a4a8: open (...../lib/user/syscall.c:110)
0x08048107: test_main (...esys/base/syn-remove.c:20)
0x080489f3: main (...ild/../../tests/main.c:13)
0x08048a1e: _start (.../../../lib/user/entry.c:9)
Translations of user virtual addresses above are based on a guess at
the binary to use.  If this guess is incorrect, then those
translations will be misleading.

OUTPUT FROM tests/filesys/base/syn-remove:

Copying tests/filesys/base/syn-remove to scratch partition...
squish-pty bochs -q
========================================================================
                       Bochs x86 Emulator 2.6.2
                Built from SVN snapshot on May 26, 2013
                  Compiled on Jun 26 2021 at 01:03:24
========================================================================
PiLo hda1
Loading.........
Kernel command line: -q -f extract run syn-remove
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  196,000 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 105 sectors (52 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-remove' into the file system...
Erasing ustar archive...
Executing 'syn-remove':
(syn-remove) begin
(syn-remove) create "deleteme"
(syn-remove) open "deleteme"
Kernel PANIC at ../../userprog/syscall.c:266 in open(): assertion `0' failed.
Call stack: 0xc002855c 0xc002ba48 0xc002bdf9 0xc00219f6 0xc0021b2d 0x804a4a8 0x8048107 0x80489f3 0x8048a1e.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 313 ticks
Thread: 0 idle ticks, 267 kernel ticks, 46 user ticks
hda2 (filesys): 85 reads, 221 writes
hda3 (scratch): 104 reads, 2 writes
Console: 1219 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off..